// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String       @id @default(uuid())
  name                String
  email               String
  emailVerified       Boolean
  image               String?
  phoneNumber         String?
  phoneNumberVerified Boolean?
  createdAt           DateTime
  updatedAt           DateTime
  sessions            Session[]
  accounts            Account[]
  userInfo            UserInfo?
  departments         Department[]
  projects            Project[]
  Task                Task[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@unique([phoneNumber])
  @@map("user")
}

model UserInfo {
  id                String        @id @default(uuid())
  dateOfBirh        DateTime
  nationality       String
  citizenshipNumber String
  panNumber         String
  userId            String
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  bankDetails       BankDetails[]

  @@unique([userId])
  @@map("user_info")
}

model BankDetails {
  id            String   @id @default(uuid())
  bankName      String
  accountNumber String
  branch        String
  name          String
  userInfoId    String
  userInfo      UserInfo @relation(fields: [userInfoId], references: [id], onDelete: Cascade)

  @@map("bank_details")
}

model Session {
  id             String   @id @default(uuid())
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Department {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]

  @@map("department")
}

model Project {
  id          String         @id @default(uuid())
  name        String
  description String
  image       String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  users       User[]
  groups      ProjectGroup[]
  Task        Task[]

  @@map("project")
}

model ProjectGroup {
  id          String  @id @default(uuid())
  name        String
  description String
  Project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  tasks       Task[]
}

model Task {
  id             String        @id @default(uuid())
  title          String
  description    String
  dueDate        DateTime?
  startDate      DateTime?
  ProjectGroup   ProjectGroup? @relation(fields: [projectGroupId], references: [id], onDelete: SetNull)
  projectGroupId String?
  completed      Boolean       @default(false)
  users          User[]
  Project        Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId      String
}
