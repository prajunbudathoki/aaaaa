
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `UserInfo` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model UserInfo
 * 
 */
export type UserInfoModel = runtime.Types.Result.DefaultSelection<Prisma.$UserInfoPayload>

export type AggregateUserInfo = {
  _count: UserInfoCountAggregateOutputType | null
  _min: UserInfoMinAggregateOutputType | null
  _max: UserInfoMaxAggregateOutputType | null
}

export type UserInfoMinAggregateOutputType = {
  id: string | null
  dateOfBirh: Date | null
  nationality: string | null
  citizenshipNumber: string | null
  panNumber: string | null
  userId: string | null
}

export type UserInfoMaxAggregateOutputType = {
  id: string | null
  dateOfBirh: Date | null
  nationality: string | null
  citizenshipNumber: string | null
  panNumber: string | null
  userId: string | null
}

export type UserInfoCountAggregateOutputType = {
  id: number
  dateOfBirh: number
  nationality: number
  citizenshipNumber: number
  panNumber: number
  userId: number
  _all: number
}


export type UserInfoMinAggregateInputType = {
  id?: true
  dateOfBirh?: true
  nationality?: true
  citizenshipNumber?: true
  panNumber?: true
  userId?: true
}

export type UserInfoMaxAggregateInputType = {
  id?: true
  dateOfBirh?: true
  nationality?: true
  citizenshipNumber?: true
  panNumber?: true
  userId?: true
}

export type UserInfoCountAggregateInputType = {
  id?: true
  dateOfBirh?: true
  nationality?: true
  citizenshipNumber?: true
  panNumber?: true
  userId?: true
  _all?: true
}

export type UserInfoAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserInfo to aggregate.
   */
  where?: Prisma.UserInfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserInfos to fetch.
   */
  orderBy?: Prisma.UserInfoOrderByWithRelationInput | Prisma.UserInfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserInfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserInfos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserInfos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserInfos
  **/
  _count?: true | UserInfoCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserInfoMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserInfoMaxAggregateInputType
}

export type GetUserInfoAggregateType<T extends UserInfoAggregateArgs> = {
      [P in keyof T & keyof AggregateUserInfo]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserInfo[P]>
    : Prisma.GetScalarType<T[P], AggregateUserInfo[P]>
}




export type UserInfoGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserInfoWhereInput
  orderBy?: Prisma.UserInfoOrderByWithAggregationInput | Prisma.UserInfoOrderByWithAggregationInput[]
  by: Prisma.UserInfoScalarFieldEnum[] | Prisma.UserInfoScalarFieldEnum
  having?: Prisma.UserInfoScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserInfoCountAggregateInputType | true
  _min?: UserInfoMinAggregateInputType
  _max?: UserInfoMaxAggregateInputType
}

export type UserInfoGroupByOutputType = {
  id: string
  dateOfBirh: Date
  nationality: string
  citizenshipNumber: string
  panNumber: string
  userId: string
  _count: UserInfoCountAggregateOutputType | null
  _min: UserInfoMinAggregateOutputType | null
  _max: UserInfoMaxAggregateOutputType | null
}

type GetUserInfoGroupByPayload<T extends UserInfoGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserInfoGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserInfoGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserInfoGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserInfoGroupByOutputType[P]>
      }
    >
  > 



export type UserInfoWhereInput = {
  AND?: Prisma.UserInfoWhereInput | Prisma.UserInfoWhereInput[]
  OR?: Prisma.UserInfoWhereInput[]
  NOT?: Prisma.UserInfoWhereInput | Prisma.UserInfoWhereInput[]
  id?: Prisma.StringFilter<"UserInfo"> | string
  dateOfBirh?: Prisma.DateTimeFilter<"UserInfo"> | Date | string
  nationality?: Prisma.StringFilter<"UserInfo"> | string
  citizenshipNumber?: Prisma.StringFilter<"UserInfo"> | string
  panNumber?: Prisma.StringFilter<"UserInfo"> | string
  userId?: Prisma.StringFilter<"UserInfo"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  bankDetails?: Prisma.BankDetailsListRelationFilter
}

export type UserInfoOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  dateOfBirh?: Prisma.SortOrder
  nationality?: Prisma.SortOrder
  citizenshipNumber?: Prisma.SortOrder
  panNumber?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  bankDetails?: Prisma.BankDetailsOrderByRelationAggregateInput
}

export type UserInfoWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  userId?: string
  AND?: Prisma.UserInfoWhereInput | Prisma.UserInfoWhereInput[]
  OR?: Prisma.UserInfoWhereInput[]
  NOT?: Prisma.UserInfoWhereInput | Prisma.UserInfoWhereInput[]
  dateOfBirh?: Prisma.DateTimeFilter<"UserInfo"> | Date | string
  nationality?: Prisma.StringFilter<"UserInfo"> | string
  citizenshipNumber?: Prisma.StringFilter<"UserInfo"> | string
  panNumber?: Prisma.StringFilter<"UserInfo"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  bankDetails?: Prisma.BankDetailsListRelationFilter
}, "id" | "userId">

export type UserInfoOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  dateOfBirh?: Prisma.SortOrder
  nationality?: Prisma.SortOrder
  citizenshipNumber?: Prisma.SortOrder
  panNumber?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  _count?: Prisma.UserInfoCountOrderByAggregateInput
  _max?: Prisma.UserInfoMaxOrderByAggregateInput
  _min?: Prisma.UserInfoMinOrderByAggregateInput
}

export type UserInfoScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserInfoScalarWhereWithAggregatesInput | Prisma.UserInfoScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserInfoScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserInfoScalarWhereWithAggregatesInput | Prisma.UserInfoScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"UserInfo"> | string
  dateOfBirh?: Prisma.DateTimeWithAggregatesFilter<"UserInfo"> | Date | string
  nationality?: Prisma.StringWithAggregatesFilter<"UserInfo"> | string
  citizenshipNumber?: Prisma.StringWithAggregatesFilter<"UserInfo"> | string
  panNumber?: Prisma.StringWithAggregatesFilter<"UserInfo"> | string
  userId?: Prisma.StringWithAggregatesFilter<"UserInfo"> | string
}

export type UserInfoCreateInput = {
  id: string
  dateOfBirh: Date | string
  nationality: string
  citizenshipNumber: string
  panNumber: string
  user: Prisma.UserCreateNestedOneWithoutUserInfoInput
  bankDetails?: Prisma.BankDetailsCreateNestedManyWithoutUserInfoInput
}

export type UserInfoUncheckedCreateInput = {
  id: string
  dateOfBirh: Date | string
  nationality: string
  citizenshipNumber: string
  panNumber: string
  userId: string
  bankDetails?: Prisma.BankDetailsUncheckedCreateNestedManyWithoutUserInfoInput
}

export type UserInfoUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dateOfBirh?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  citizenshipNumber?: Prisma.StringFieldUpdateOperationsInput | string
  panNumber?: Prisma.StringFieldUpdateOperationsInput | string
  user?: Prisma.UserUpdateOneRequiredWithoutUserInfoNestedInput
  bankDetails?: Prisma.BankDetailsUpdateManyWithoutUserInfoNestedInput
}

export type UserInfoUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dateOfBirh?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  citizenshipNumber?: Prisma.StringFieldUpdateOperationsInput | string
  panNumber?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  bankDetails?: Prisma.BankDetailsUncheckedUpdateManyWithoutUserInfoNestedInput
}

export type UserInfoCreateManyInput = {
  id: string
  dateOfBirh: Date | string
  nationality: string
  citizenshipNumber: string
  panNumber: string
  userId: string
}

export type UserInfoUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dateOfBirh?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  citizenshipNumber?: Prisma.StringFieldUpdateOperationsInput | string
  panNumber?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserInfoUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dateOfBirh?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  citizenshipNumber?: Prisma.StringFieldUpdateOperationsInput | string
  panNumber?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserInfoNullableScalarRelationFilter = {
  is?: Prisma.UserInfoWhereInput | null
  isNot?: Prisma.UserInfoWhereInput | null
}

export type UserInfoCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  dateOfBirh?: Prisma.SortOrder
  nationality?: Prisma.SortOrder
  citizenshipNumber?: Prisma.SortOrder
  panNumber?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type UserInfoMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  dateOfBirh?: Prisma.SortOrder
  nationality?: Prisma.SortOrder
  citizenshipNumber?: Prisma.SortOrder
  panNumber?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type UserInfoMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  dateOfBirh?: Prisma.SortOrder
  nationality?: Prisma.SortOrder
  citizenshipNumber?: Prisma.SortOrder
  panNumber?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type UserInfoScalarRelationFilter = {
  is?: Prisma.UserInfoWhereInput
  isNot?: Prisma.UserInfoWhereInput
}

export type UserInfoCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserInfoCreateWithoutUserInput, Prisma.UserInfoUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserInfoCreateOrConnectWithoutUserInput
  connect?: Prisma.UserInfoWhereUniqueInput
}

export type UserInfoUncheckedCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserInfoCreateWithoutUserInput, Prisma.UserInfoUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserInfoCreateOrConnectWithoutUserInput
  connect?: Prisma.UserInfoWhereUniqueInput
}

export type UserInfoUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserInfoCreateWithoutUserInput, Prisma.UserInfoUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserInfoCreateOrConnectWithoutUserInput
  upsert?: Prisma.UserInfoUpsertWithoutUserInput
  disconnect?: Prisma.UserInfoWhereInput | boolean
  delete?: Prisma.UserInfoWhereInput | boolean
  connect?: Prisma.UserInfoWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserInfoUpdateToOneWithWhereWithoutUserInput, Prisma.UserInfoUpdateWithoutUserInput>, Prisma.UserInfoUncheckedUpdateWithoutUserInput>
}

export type UserInfoUncheckedUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserInfoCreateWithoutUserInput, Prisma.UserInfoUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserInfoCreateOrConnectWithoutUserInput
  upsert?: Prisma.UserInfoUpsertWithoutUserInput
  disconnect?: Prisma.UserInfoWhereInput | boolean
  delete?: Prisma.UserInfoWhereInput | boolean
  connect?: Prisma.UserInfoWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserInfoUpdateToOneWithWhereWithoutUserInput, Prisma.UserInfoUpdateWithoutUserInput>, Prisma.UserInfoUncheckedUpdateWithoutUserInput>
}

export type UserInfoCreateNestedOneWithoutBankDetailsInput = {
  create?: Prisma.XOR<Prisma.UserInfoCreateWithoutBankDetailsInput, Prisma.UserInfoUncheckedCreateWithoutBankDetailsInput>
  connectOrCreate?: Prisma.UserInfoCreateOrConnectWithoutBankDetailsInput
  connect?: Prisma.UserInfoWhereUniqueInput
}

export type UserInfoUpdateOneRequiredWithoutBankDetailsNestedInput = {
  create?: Prisma.XOR<Prisma.UserInfoCreateWithoutBankDetailsInput, Prisma.UserInfoUncheckedCreateWithoutBankDetailsInput>
  connectOrCreate?: Prisma.UserInfoCreateOrConnectWithoutBankDetailsInput
  upsert?: Prisma.UserInfoUpsertWithoutBankDetailsInput
  connect?: Prisma.UserInfoWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserInfoUpdateToOneWithWhereWithoutBankDetailsInput, Prisma.UserInfoUpdateWithoutBankDetailsInput>, Prisma.UserInfoUncheckedUpdateWithoutBankDetailsInput>
}

export type UserInfoCreateWithoutUserInput = {
  id: string
  dateOfBirh: Date | string
  nationality: string
  citizenshipNumber: string
  panNumber: string
  bankDetails?: Prisma.BankDetailsCreateNestedManyWithoutUserInfoInput
}

export type UserInfoUncheckedCreateWithoutUserInput = {
  id: string
  dateOfBirh: Date | string
  nationality: string
  citizenshipNumber: string
  panNumber: string
  bankDetails?: Prisma.BankDetailsUncheckedCreateNestedManyWithoutUserInfoInput
}

export type UserInfoCreateOrConnectWithoutUserInput = {
  where: Prisma.UserInfoWhereUniqueInput
  create: Prisma.XOR<Prisma.UserInfoCreateWithoutUserInput, Prisma.UserInfoUncheckedCreateWithoutUserInput>
}

export type UserInfoUpsertWithoutUserInput = {
  update: Prisma.XOR<Prisma.UserInfoUpdateWithoutUserInput, Prisma.UserInfoUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.UserInfoCreateWithoutUserInput, Prisma.UserInfoUncheckedCreateWithoutUserInput>
  where?: Prisma.UserInfoWhereInput
}

export type UserInfoUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.UserInfoWhereInput
  data: Prisma.XOR<Prisma.UserInfoUpdateWithoutUserInput, Prisma.UserInfoUncheckedUpdateWithoutUserInput>
}

export type UserInfoUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dateOfBirh?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  citizenshipNumber?: Prisma.StringFieldUpdateOperationsInput | string
  panNumber?: Prisma.StringFieldUpdateOperationsInput | string
  bankDetails?: Prisma.BankDetailsUpdateManyWithoutUserInfoNestedInput
}

export type UserInfoUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dateOfBirh?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  citizenshipNumber?: Prisma.StringFieldUpdateOperationsInput | string
  panNumber?: Prisma.StringFieldUpdateOperationsInput | string
  bankDetails?: Prisma.BankDetailsUncheckedUpdateManyWithoutUserInfoNestedInput
}

export type UserInfoCreateWithoutBankDetailsInput = {
  id: string
  dateOfBirh: Date | string
  nationality: string
  citizenshipNumber: string
  panNumber: string
  user: Prisma.UserCreateNestedOneWithoutUserInfoInput
}

export type UserInfoUncheckedCreateWithoutBankDetailsInput = {
  id: string
  dateOfBirh: Date | string
  nationality: string
  citizenshipNumber: string
  panNumber: string
  userId: string
}

export type UserInfoCreateOrConnectWithoutBankDetailsInput = {
  where: Prisma.UserInfoWhereUniqueInput
  create: Prisma.XOR<Prisma.UserInfoCreateWithoutBankDetailsInput, Prisma.UserInfoUncheckedCreateWithoutBankDetailsInput>
}

export type UserInfoUpsertWithoutBankDetailsInput = {
  update: Prisma.XOR<Prisma.UserInfoUpdateWithoutBankDetailsInput, Prisma.UserInfoUncheckedUpdateWithoutBankDetailsInput>
  create: Prisma.XOR<Prisma.UserInfoCreateWithoutBankDetailsInput, Prisma.UserInfoUncheckedCreateWithoutBankDetailsInput>
  where?: Prisma.UserInfoWhereInput
}

export type UserInfoUpdateToOneWithWhereWithoutBankDetailsInput = {
  where?: Prisma.UserInfoWhereInput
  data: Prisma.XOR<Prisma.UserInfoUpdateWithoutBankDetailsInput, Prisma.UserInfoUncheckedUpdateWithoutBankDetailsInput>
}

export type UserInfoUpdateWithoutBankDetailsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dateOfBirh?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  citizenshipNumber?: Prisma.StringFieldUpdateOperationsInput | string
  panNumber?: Prisma.StringFieldUpdateOperationsInput | string
  user?: Prisma.UserUpdateOneRequiredWithoutUserInfoNestedInput
}

export type UserInfoUncheckedUpdateWithoutBankDetailsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dateOfBirh?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  citizenshipNumber?: Prisma.StringFieldUpdateOperationsInput | string
  panNumber?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type UserInfoCountOutputType
 */

export type UserInfoCountOutputType = {
  bankDetails: number
}

export type UserInfoCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  bankDetails?: boolean | UserInfoCountOutputTypeCountBankDetailsArgs
}

/**
 * UserInfoCountOutputType without action
 */
export type UserInfoCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserInfoCountOutputType
   */
  select?: Prisma.UserInfoCountOutputTypeSelect<ExtArgs> | null
}

/**
 * UserInfoCountOutputType without action
 */
export type UserInfoCountOutputTypeCountBankDetailsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BankDetailsWhereInput
}


export type UserInfoSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  dateOfBirh?: boolean
  nationality?: boolean
  citizenshipNumber?: boolean
  panNumber?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  bankDetails?: boolean | Prisma.UserInfo$bankDetailsArgs<ExtArgs>
  _count?: boolean | Prisma.UserInfoCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userInfo"]>

export type UserInfoSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  dateOfBirh?: boolean
  nationality?: boolean
  citizenshipNumber?: boolean
  panNumber?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userInfo"]>

export type UserInfoSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  dateOfBirh?: boolean
  nationality?: boolean
  citizenshipNumber?: boolean
  panNumber?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userInfo"]>

export type UserInfoSelectScalar = {
  id?: boolean
  dateOfBirh?: boolean
  nationality?: boolean
  citizenshipNumber?: boolean
  panNumber?: boolean
  userId?: boolean
}

export type UserInfoOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "dateOfBirh" | "nationality" | "citizenshipNumber" | "panNumber" | "userId", ExtArgs["result"]["userInfo"]>
export type UserInfoInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  bankDetails?: boolean | Prisma.UserInfo$bankDetailsArgs<ExtArgs>
  _count?: boolean | Prisma.UserInfoCountOutputTypeDefaultArgs<ExtArgs>
}
export type UserInfoIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type UserInfoIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $UserInfoPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserInfo"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    bankDetails: Prisma.$BankDetailsPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    dateOfBirh: Date
    nationality: string
    citizenshipNumber: string
    panNumber: string
    userId: string
  }, ExtArgs["result"]["userInfo"]>
  composites: {}
}

export type UserInfoGetPayload<S extends boolean | null | undefined | UserInfoDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserInfoPayload, S>

export type UserInfoCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserInfoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserInfoCountAggregateInputType | true
  }

export interface UserInfoDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserInfo'], meta: { name: 'UserInfo' } }
  /**
   * Find zero or one UserInfo that matches the filter.
   * @param {UserInfoFindUniqueArgs} args - Arguments to find a UserInfo
   * @example
   * // Get one UserInfo
   * const userInfo = await prisma.userInfo.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserInfoFindUniqueArgs>(args: Prisma.SelectSubset<T, UserInfoFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserInfoClient<runtime.Types.Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserInfo that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserInfoFindUniqueOrThrowArgs} args - Arguments to find a UserInfo
   * @example
   * // Get one UserInfo
   * const userInfo = await prisma.userInfo.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserInfoFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserInfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserInfoClient<runtime.Types.Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserInfo that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserInfoFindFirstArgs} args - Arguments to find a UserInfo
   * @example
   * // Get one UserInfo
   * const userInfo = await prisma.userInfo.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserInfoFindFirstArgs>(args?: Prisma.SelectSubset<T, UserInfoFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserInfoClient<runtime.Types.Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserInfo that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserInfoFindFirstOrThrowArgs} args - Arguments to find a UserInfo
   * @example
   * // Get one UserInfo
   * const userInfo = await prisma.userInfo.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserInfoFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserInfoFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserInfoClient<runtime.Types.Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserInfos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserInfoFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserInfos
   * const userInfos = await prisma.userInfo.findMany()
   * 
   * // Get first 10 UserInfos
   * const userInfos = await prisma.userInfo.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userInfoWithIdOnly = await prisma.userInfo.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UserInfoFindManyArgs>(args?: Prisma.SelectSubset<T, UserInfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserInfo.
   * @param {UserInfoCreateArgs} args - Arguments to create a UserInfo.
   * @example
   * // Create one UserInfo
   * const UserInfo = await prisma.userInfo.create({
   *   data: {
   *     // ... data to create a UserInfo
   *   }
   * })
   * 
   */
  create<T extends UserInfoCreateArgs>(args: Prisma.SelectSubset<T, UserInfoCreateArgs<ExtArgs>>): Prisma.Prisma__UserInfoClient<runtime.Types.Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserInfos.
   * @param {UserInfoCreateManyArgs} args - Arguments to create many UserInfos.
   * @example
   * // Create many UserInfos
   * const userInfo = await prisma.userInfo.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserInfoCreateManyArgs>(args?: Prisma.SelectSubset<T, UserInfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UserInfos and returns the data saved in the database.
   * @param {UserInfoCreateManyAndReturnArgs} args - Arguments to create many UserInfos.
   * @example
   * // Create many UserInfos
   * const userInfo = await prisma.userInfo.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UserInfos and only return the `id`
   * const userInfoWithIdOnly = await prisma.userInfo.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserInfoCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserInfoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UserInfo.
   * @param {UserInfoDeleteArgs} args - Arguments to delete one UserInfo.
   * @example
   * // Delete one UserInfo
   * const UserInfo = await prisma.userInfo.delete({
   *   where: {
   *     // ... filter to delete one UserInfo
   *   }
   * })
   * 
   */
  delete<T extends UserInfoDeleteArgs>(args: Prisma.SelectSubset<T, UserInfoDeleteArgs<ExtArgs>>): Prisma.Prisma__UserInfoClient<runtime.Types.Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserInfo.
   * @param {UserInfoUpdateArgs} args - Arguments to update one UserInfo.
   * @example
   * // Update one UserInfo
   * const userInfo = await prisma.userInfo.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserInfoUpdateArgs>(args: Prisma.SelectSubset<T, UserInfoUpdateArgs<ExtArgs>>): Prisma.Prisma__UserInfoClient<runtime.Types.Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserInfos.
   * @param {UserInfoDeleteManyArgs} args - Arguments to filter UserInfos to delete.
   * @example
   * // Delete a few UserInfos
   * const { count } = await prisma.userInfo.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserInfoDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserInfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserInfos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserInfoUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserInfos
   * const userInfo = await prisma.userInfo.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserInfoUpdateManyArgs>(args: Prisma.SelectSubset<T, UserInfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserInfos and returns the data updated in the database.
   * @param {UserInfoUpdateManyAndReturnArgs} args - Arguments to update many UserInfos.
   * @example
   * // Update many UserInfos
   * const userInfo = await prisma.userInfo.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UserInfos and only return the `id`
   * const userInfoWithIdOnly = await prisma.userInfo.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserInfoUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserInfoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UserInfo.
   * @param {UserInfoUpsertArgs} args - Arguments to update or create a UserInfo.
   * @example
   * // Update or create a UserInfo
   * const userInfo = await prisma.userInfo.upsert({
   *   create: {
   *     // ... data to create a UserInfo
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserInfo we want to update
   *   }
   * })
   */
  upsert<T extends UserInfoUpsertArgs>(args: Prisma.SelectSubset<T, UserInfoUpsertArgs<ExtArgs>>): Prisma.Prisma__UserInfoClient<runtime.Types.Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserInfos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserInfoCountArgs} args - Arguments to filter UserInfos to count.
   * @example
   * // Count the number of UserInfos
   * const count = await prisma.userInfo.count({
   *   where: {
   *     // ... the filter for the UserInfos we want to count
   *   }
   * })
  **/
  count<T extends UserInfoCountArgs>(
    args?: Prisma.Subset<T, UserInfoCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserInfoCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserInfo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserInfoAggregateArgs>(args: Prisma.Subset<T, UserInfoAggregateArgs>): Prisma.PrismaPromise<GetUserInfoAggregateType<T>>

  /**
   * Group by UserInfo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserInfoGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserInfoGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserInfoGroupByArgs['orderBy'] }
      : { orderBy?: UserInfoGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserInfo model
 */
readonly fields: UserInfoFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserInfo.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserInfoClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  bankDetails<T extends Prisma.UserInfo$bankDetailsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserInfo$bankDetailsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BankDetailsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserInfo model
 */
export interface UserInfoFieldRefs {
  readonly id: Prisma.FieldRef<"UserInfo", 'String'>
  readonly dateOfBirh: Prisma.FieldRef<"UserInfo", 'DateTime'>
  readonly nationality: Prisma.FieldRef<"UserInfo", 'String'>
  readonly citizenshipNumber: Prisma.FieldRef<"UserInfo", 'String'>
  readonly panNumber: Prisma.FieldRef<"UserInfo", 'String'>
  readonly userId: Prisma.FieldRef<"UserInfo", 'String'>
}
    

// Custom InputTypes
/**
 * UserInfo findUnique
 */
export type UserInfoFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserInfo
   */
  select?: Prisma.UserInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserInfo
   */
  omit?: Prisma.UserInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInfoInclude<ExtArgs> | null
  /**
   * Filter, which UserInfo to fetch.
   */
  where: Prisma.UserInfoWhereUniqueInput
}

/**
 * UserInfo findUniqueOrThrow
 */
export type UserInfoFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserInfo
   */
  select?: Prisma.UserInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserInfo
   */
  omit?: Prisma.UserInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInfoInclude<ExtArgs> | null
  /**
   * Filter, which UserInfo to fetch.
   */
  where: Prisma.UserInfoWhereUniqueInput
}

/**
 * UserInfo findFirst
 */
export type UserInfoFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserInfo
   */
  select?: Prisma.UserInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserInfo
   */
  omit?: Prisma.UserInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInfoInclude<ExtArgs> | null
  /**
   * Filter, which UserInfo to fetch.
   */
  where?: Prisma.UserInfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserInfos to fetch.
   */
  orderBy?: Prisma.UserInfoOrderByWithRelationInput | Prisma.UserInfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserInfos.
   */
  cursor?: Prisma.UserInfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserInfos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserInfos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserInfos.
   */
  distinct?: Prisma.UserInfoScalarFieldEnum | Prisma.UserInfoScalarFieldEnum[]
}

/**
 * UserInfo findFirstOrThrow
 */
export type UserInfoFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserInfo
   */
  select?: Prisma.UserInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserInfo
   */
  omit?: Prisma.UserInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInfoInclude<ExtArgs> | null
  /**
   * Filter, which UserInfo to fetch.
   */
  where?: Prisma.UserInfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserInfos to fetch.
   */
  orderBy?: Prisma.UserInfoOrderByWithRelationInput | Prisma.UserInfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserInfos.
   */
  cursor?: Prisma.UserInfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserInfos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserInfos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserInfos.
   */
  distinct?: Prisma.UserInfoScalarFieldEnum | Prisma.UserInfoScalarFieldEnum[]
}

/**
 * UserInfo findMany
 */
export type UserInfoFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserInfo
   */
  select?: Prisma.UserInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserInfo
   */
  omit?: Prisma.UserInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInfoInclude<ExtArgs> | null
  /**
   * Filter, which UserInfos to fetch.
   */
  where?: Prisma.UserInfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserInfos to fetch.
   */
  orderBy?: Prisma.UserInfoOrderByWithRelationInput | Prisma.UserInfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserInfos.
   */
  cursor?: Prisma.UserInfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserInfos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserInfos.
   */
  skip?: number
  distinct?: Prisma.UserInfoScalarFieldEnum | Prisma.UserInfoScalarFieldEnum[]
}

/**
 * UserInfo create
 */
export type UserInfoCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserInfo
   */
  select?: Prisma.UserInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserInfo
   */
  omit?: Prisma.UserInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInfoInclude<ExtArgs> | null
  /**
   * The data needed to create a UserInfo.
   */
  data: Prisma.XOR<Prisma.UserInfoCreateInput, Prisma.UserInfoUncheckedCreateInput>
}

/**
 * UserInfo createMany
 */
export type UserInfoCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserInfos.
   */
  data: Prisma.UserInfoCreateManyInput | Prisma.UserInfoCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserInfo createManyAndReturn
 */
export type UserInfoCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserInfo
   */
  select?: Prisma.UserInfoSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserInfo
   */
  omit?: Prisma.UserInfoOmit<ExtArgs> | null
  /**
   * The data used to create many UserInfos.
   */
  data: Prisma.UserInfoCreateManyInput | Prisma.UserInfoCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInfoIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * UserInfo update
 */
export type UserInfoUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserInfo
   */
  select?: Prisma.UserInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserInfo
   */
  omit?: Prisma.UserInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInfoInclude<ExtArgs> | null
  /**
   * The data needed to update a UserInfo.
   */
  data: Prisma.XOR<Prisma.UserInfoUpdateInput, Prisma.UserInfoUncheckedUpdateInput>
  /**
   * Choose, which UserInfo to update.
   */
  where: Prisma.UserInfoWhereUniqueInput
}

/**
 * UserInfo updateMany
 */
export type UserInfoUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserInfos.
   */
  data: Prisma.XOR<Prisma.UserInfoUpdateManyMutationInput, Prisma.UserInfoUncheckedUpdateManyInput>
  /**
   * Filter which UserInfos to update
   */
  where?: Prisma.UserInfoWhereInput
  /**
   * Limit how many UserInfos to update.
   */
  limit?: number
}

/**
 * UserInfo updateManyAndReturn
 */
export type UserInfoUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserInfo
   */
  select?: Prisma.UserInfoSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserInfo
   */
  omit?: Prisma.UserInfoOmit<ExtArgs> | null
  /**
   * The data used to update UserInfos.
   */
  data: Prisma.XOR<Prisma.UserInfoUpdateManyMutationInput, Prisma.UserInfoUncheckedUpdateManyInput>
  /**
   * Filter which UserInfos to update
   */
  where?: Prisma.UserInfoWhereInput
  /**
   * Limit how many UserInfos to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInfoIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * UserInfo upsert
 */
export type UserInfoUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserInfo
   */
  select?: Prisma.UserInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserInfo
   */
  omit?: Prisma.UserInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInfoInclude<ExtArgs> | null
  /**
   * The filter to search for the UserInfo to update in case it exists.
   */
  where: Prisma.UserInfoWhereUniqueInput
  /**
   * In case the UserInfo found by the `where` argument doesn't exist, create a new UserInfo with this data.
   */
  create: Prisma.XOR<Prisma.UserInfoCreateInput, Prisma.UserInfoUncheckedCreateInput>
  /**
   * In case the UserInfo was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserInfoUpdateInput, Prisma.UserInfoUncheckedUpdateInput>
}

/**
 * UserInfo delete
 */
export type UserInfoDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserInfo
   */
  select?: Prisma.UserInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserInfo
   */
  omit?: Prisma.UserInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInfoInclude<ExtArgs> | null
  /**
   * Filter which UserInfo to delete.
   */
  where: Prisma.UserInfoWhereUniqueInput
}

/**
 * UserInfo deleteMany
 */
export type UserInfoDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserInfos to delete
   */
  where?: Prisma.UserInfoWhereInput
  /**
   * Limit how many UserInfos to delete.
   */
  limit?: number
}

/**
 * UserInfo.bankDetails
 */
export type UserInfo$bankDetailsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankDetails
   */
  select?: Prisma.BankDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BankDetails
   */
  omit?: Prisma.BankDetailsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankDetailsInclude<ExtArgs> | null
  where?: Prisma.BankDetailsWhereInput
  orderBy?: Prisma.BankDetailsOrderByWithRelationInput | Prisma.BankDetailsOrderByWithRelationInput[]
  cursor?: Prisma.BankDetailsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.BankDetailsScalarFieldEnum | Prisma.BankDetailsScalarFieldEnum[]
}

/**
 * UserInfo without action
 */
export type UserInfoDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserInfo
   */
  select?: Prisma.UserInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserInfo
   */
  omit?: Prisma.UserInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInfoInclude<ExtArgs> | null
}
