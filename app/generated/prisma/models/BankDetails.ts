
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `BankDetails` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model BankDetails
 * 
 */
export type BankDetailsModel = runtime.Types.Result.DefaultSelection<Prisma.$BankDetailsPayload>

export type AggregateBankDetails = {
  _count: BankDetailsCountAggregateOutputType | null
  _min: BankDetailsMinAggregateOutputType | null
  _max: BankDetailsMaxAggregateOutputType | null
}

export type BankDetailsMinAggregateOutputType = {
  id: string | null
  bankName: string | null
  accountNumber: string | null
  branch: string | null
  name: string | null
  userInfoId: string | null
}

export type BankDetailsMaxAggregateOutputType = {
  id: string | null
  bankName: string | null
  accountNumber: string | null
  branch: string | null
  name: string | null
  userInfoId: string | null
}

export type BankDetailsCountAggregateOutputType = {
  id: number
  bankName: number
  accountNumber: number
  branch: number
  name: number
  userInfoId: number
  _all: number
}


export type BankDetailsMinAggregateInputType = {
  id?: true
  bankName?: true
  accountNumber?: true
  branch?: true
  name?: true
  userInfoId?: true
}

export type BankDetailsMaxAggregateInputType = {
  id?: true
  bankName?: true
  accountNumber?: true
  branch?: true
  name?: true
  userInfoId?: true
}

export type BankDetailsCountAggregateInputType = {
  id?: true
  bankName?: true
  accountNumber?: true
  branch?: true
  name?: true
  userInfoId?: true
  _all?: true
}

export type BankDetailsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which BankDetails to aggregate.
   */
  where?: Prisma.BankDetailsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BankDetails to fetch.
   */
  orderBy?: Prisma.BankDetailsOrderByWithRelationInput | Prisma.BankDetailsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.BankDetailsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BankDetails from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BankDetails.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned BankDetails
  **/
  _count?: true | BankDetailsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: BankDetailsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: BankDetailsMaxAggregateInputType
}

export type GetBankDetailsAggregateType<T extends BankDetailsAggregateArgs> = {
      [P in keyof T & keyof AggregateBankDetails]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBankDetails[P]>
    : Prisma.GetScalarType<T[P], AggregateBankDetails[P]>
}




export type BankDetailsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BankDetailsWhereInput
  orderBy?: Prisma.BankDetailsOrderByWithAggregationInput | Prisma.BankDetailsOrderByWithAggregationInput[]
  by: Prisma.BankDetailsScalarFieldEnum[] | Prisma.BankDetailsScalarFieldEnum
  having?: Prisma.BankDetailsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: BankDetailsCountAggregateInputType | true
  _min?: BankDetailsMinAggregateInputType
  _max?: BankDetailsMaxAggregateInputType
}

export type BankDetailsGroupByOutputType = {
  id: string
  bankName: string
  accountNumber: string
  branch: string
  name: string
  userInfoId: string
  _count: BankDetailsCountAggregateOutputType | null
  _min: BankDetailsMinAggregateOutputType | null
  _max: BankDetailsMaxAggregateOutputType | null
}

type GetBankDetailsGroupByPayload<T extends BankDetailsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BankDetailsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof BankDetailsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BankDetailsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BankDetailsGroupByOutputType[P]>
      }
    >
  > 



export type BankDetailsWhereInput = {
  AND?: Prisma.BankDetailsWhereInput | Prisma.BankDetailsWhereInput[]
  OR?: Prisma.BankDetailsWhereInput[]
  NOT?: Prisma.BankDetailsWhereInput | Prisma.BankDetailsWhereInput[]
  id?: Prisma.StringFilter<"BankDetails"> | string
  bankName?: Prisma.StringFilter<"BankDetails"> | string
  accountNumber?: Prisma.StringFilter<"BankDetails"> | string
  branch?: Prisma.StringFilter<"BankDetails"> | string
  name?: Prisma.StringFilter<"BankDetails"> | string
  userInfoId?: Prisma.StringFilter<"BankDetails"> | string
  userInfo?: Prisma.XOR<Prisma.UserInfoScalarRelationFilter, Prisma.UserInfoWhereInput>
}

export type BankDetailsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  bankName?: Prisma.SortOrder
  accountNumber?: Prisma.SortOrder
  branch?: Prisma.SortOrder
  name?: Prisma.SortOrder
  userInfoId?: Prisma.SortOrder
  userInfo?: Prisma.UserInfoOrderByWithRelationInput
}

export type BankDetailsWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.BankDetailsWhereInput | Prisma.BankDetailsWhereInput[]
  OR?: Prisma.BankDetailsWhereInput[]
  NOT?: Prisma.BankDetailsWhereInput | Prisma.BankDetailsWhereInput[]
  bankName?: Prisma.StringFilter<"BankDetails"> | string
  accountNumber?: Prisma.StringFilter<"BankDetails"> | string
  branch?: Prisma.StringFilter<"BankDetails"> | string
  name?: Prisma.StringFilter<"BankDetails"> | string
  userInfoId?: Prisma.StringFilter<"BankDetails"> | string
  userInfo?: Prisma.XOR<Prisma.UserInfoScalarRelationFilter, Prisma.UserInfoWhereInput>
}, "id">

export type BankDetailsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  bankName?: Prisma.SortOrder
  accountNumber?: Prisma.SortOrder
  branch?: Prisma.SortOrder
  name?: Prisma.SortOrder
  userInfoId?: Prisma.SortOrder
  _count?: Prisma.BankDetailsCountOrderByAggregateInput
  _max?: Prisma.BankDetailsMaxOrderByAggregateInput
  _min?: Prisma.BankDetailsMinOrderByAggregateInput
}

export type BankDetailsScalarWhereWithAggregatesInput = {
  AND?: Prisma.BankDetailsScalarWhereWithAggregatesInput | Prisma.BankDetailsScalarWhereWithAggregatesInput[]
  OR?: Prisma.BankDetailsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.BankDetailsScalarWhereWithAggregatesInput | Prisma.BankDetailsScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"BankDetails"> | string
  bankName?: Prisma.StringWithAggregatesFilter<"BankDetails"> | string
  accountNumber?: Prisma.StringWithAggregatesFilter<"BankDetails"> | string
  branch?: Prisma.StringWithAggregatesFilter<"BankDetails"> | string
  name?: Prisma.StringWithAggregatesFilter<"BankDetails"> | string
  userInfoId?: Prisma.StringWithAggregatesFilter<"BankDetails"> | string
}

export type BankDetailsCreateInput = {
  id?: string
  bankName: string
  accountNumber: string
  branch: string
  name: string
  userInfo: Prisma.UserInfoCreateNestedOneWithoutBankDetailsInput
}

export type BankDetailsUncheckedCreateInput = {
  id?: string
  bankName: string
  accountNumber: string
  branch: string
  name: string
  userInfoId: string
}

export type BankDetailsUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  bankName?: Prisma.StringFieldUpdateOperationsInput | string
  accountNumber?: Prisma.StringFieldUpdateOperationsInput | string
  branch?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  userInfo?: Prisma.UserInfoUpdateOneRequiredWithoutBankDetailsNestedInput
}

export type BankDetailsUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  bankName?: Prisma.StringFieldUpdateOperationsInput | string
  accountNumber?: Prisma.StringFieldUpdateOperationsInput | string
  branch?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  userInfoId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type BankDetailsCreateManyInput = {
  id?: string
  bankName: string
  accountNumber: string
  branch: string
  name: string
  userInfoId: string
}

export type BankDetailsUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  bankName?: Prisma.StringFieldUpdateOperationsInput | string
  accountNumber?: Prisma.StringFieldUpdateOperationsInput | string
  branch?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type BankDetailsUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  bankName?: Prisma.StringFieldUpdateOperationsInput | string
  accountNumber?: Prisma.StringFieldUpdateOperationsInput | string
  branch?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  userInfoId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type BankDetailsListRelationFilter = {
  every?: Prisma.BankDetailsWhereInput
  some?: Prisma.BankDetailsWhereInput
  none?: Prisma.BankDetailsWhereInput
}

export type BankDetailsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type BankDetailsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  bankName?: Prisma.SortOrder
  accountNumber?: Prisma.SortOrder
  branch?: Prisma.SortOrder
  name?: Prisma.SortOrder
  userInfoId?: Prisma.SortOrder
}

export type BankDetailsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  bankName?: Prisma.SortOrder
  accountNumber?: Prisma.SortOrder
  branch?: Prisma.SortOrder
  name?: Prisma.SortOrder
  userInfoId?: Prisma.SortOrder
}

export type BankDetailsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  bankName?: Prisma.SortOrder
  accountNumber?: Prisma.SortOrder
  branch?: Prisma.SortOrder
  name?: Prisma.SortOrder
  userInfoId?: Prisma.SortOrder
}

export type BankDetailsCreateNestedManyWithoutUserInfoInput = {
  create?: Prisma.XOR<Prisma.BankDetailsCreateWithoutUserInfoInput, Prisma.BankDetailsUncheckedCreateWithoutUserInfoInput> | Prisma.BankDetailsCreateWithoutUserInfoInput[] | Prisma.BankDetailsUncheckedCreateWithoutUserInfoInput[]
  connectOrCreate?: Prisma.BankDetailsCreateOrConnectWithoutUserInfoInput | Prisma.BankDetailsCreateOrConnectWithoutUserInfoInput[]
  createMany?: Prisma.BankDetailsCreateManyUserInfoInputEnvelope
  connect?: Prisma.BankDetailsWhereUniqueInput | Prisma.BankDetailsWhereUniqueInput[]
}

export type BankDetailsUncheckedCreateNestedManyWithoutUserInfoInput = {
  create?: Prisma.XOR<Prisma.BankDetailsCreateWithoutUserInfoInput, Prisma.BankDetailsUncheckedCreateWithoutUserInfoInput> | Prisma.BankDetailsCreateWithoutUserInfoInput[] | Prisma.BankDetailsUncheckedCreateWithoutUserInfoInput[]
  connectOrCreate?: Prisma.BankDetailsCreateOrConnectWithoutUserInfoInput | Prisma.BankDetailsCreateOrConnectWithoutUserInfoInput[]
  createMany?: Prisma.BankDetailsCreateManyUserInfoInputEnvelope
  connect?: Prisma.BankDetailsWhereUniqueInput | Prisma.BankDetailsWhereUniqueInput[]
}

export type BankDetailsUpdateManyWithoutUserInfoNestedInput = {
  create?: Prisma.XOR<Prisma.BankDetailsCreateWithoutUserInfoInput, Prisma.BankDetailsUncheckedCreateWithoutUserInfoInput> | Prisma.BankDetailsCreateWithoutUserInfoInput[] | Prisma.BankDetailsUncheckedCreateWithoutUserInfoInput[]
  connectOrCreate?: Prisma.BankDetailsCreateOrConnectWithoutUserInfoInput | Prisma.BankDetailsCreateOrConnectWithoutUserInfoInput[]
  upsert?: Prisma.BankDetailsUpsertWithWhereUniqueWithoutUserInfoInput | Prisma.BankDetailsUpsertWithWhereUniqueWithoutUserInfoInput[]
  createMany?: Prisma.BankDetailsCreateManyUserInfoInputEnvelope
  set?: Prisma.BankDetailsWhereUniqueInput | Prisma.BankDetailsWhereUniqueInput[]
  disconnect?: Prisma.BankDetailsWhereUniqueInput | Prisma.BankDetailsWhereUniqueInput[]
  delete?: Prisma.BankDetailsWhereUniqueInput | Prisma.BankDetailsWhereUniqueInput[]
  connect?: Prisma.BankDetailsWhereUniqueInput | Prisma.BankDetailsWhereUniqueInput[]
  update?: Prisma.BankDetailsUpdateWithWhereUniqueWithoutUserInfoInput | Prisma.BankDetailsUpdateWithWhereUniqueWithoutUserInfoInput[]
  updateMany?: Prisma.BankDetailsUpdateManyWithWhereWithoutUserInfoInput | Prisma.BankDetailsUpdateManyWithWhereWithoutUserInfoInput[]
  deleteMany?: Prisma.BankDetailsScalarWhereInput | Prisma.BankDetailsScalarWhereInput[]
}

export type BankDetailsUncheckedUpdateManyWithoutUserInfoNestedInput = {
  create?: Prisma.XOR<Prisma.BankDetailsCreateWithoutUserInfoInput, Prisma.BankDetailsUncheckedCreateWithoutUserInfoInput> | Prisma.BankDetailsCreateWithoutUserInfoInput[] | Prisma.BankDetailsUncheckedCreateWithoutUserInfoInput[]
  connectOrCreate?: Prisma.BankDetailsCreateOrConnectWithoutUserInfoInput | Prisma.BankDetailsCreateOrConnectWithoutUserInfoInput[]
  upsert?: Prisma.BankDetailsUpsertWithWhereUniqueWithoutUserInfoInput | Prisma.BankDetailsUpsertWithWhereUniqueWithoutUserInfoInput[]
  createMany?: Prisma.BankDetailsCreateManyUserInfoInputEnvelope
  set?: Prisma.BankDetailsWhereUniqueInput | Prisma.BankDetailsWhereUniqueInput[]
  disconnect?: Prisma.BankDetailsWhereUniqueInput | Prisma.BankDetailsWhereUniqueInput[]
  delete?: Prisma.BankDetailsWhereUniqueInput | Prisma.BankDetailsWhereUniqueInput[]
  connect?: Prisma.BankDetailsWhereUniqueInput | Prisma.BankDetailsWhereUniqueInput[]
  update?: Prisma.BankDetailsUpdateWithWhereUniqueWithoutUserInfoInput | Prisma.BankDetailsUpdateWithWhereUniqueWithoutUserInfoInput[]
  updateMany?: Prisma.BankDetailsUpdateManyWithWhereWithoutUserInfoInput | Prisma.BankDetailsUpdateManyWithWhereWithoutUserInfoInput[]
  deleteMany?: Prisma.BankDetailsScalarWhereInput | Prisma.BankDetailsScalarWhereInput[]
}

export type BankDetailsCreateWithoutUserInfoInput = {
  id?: string
  bankName: string
  accountNumber: string
  branch: string
  name: string
}

export type BankDetailsUncheckedCreateWithoutUserInfoInput = {
  id?: string
  bankName: string
  accountNumber: string
  branch: string
  name: string
}

export type BankDetailsCreateOrConnectWithoutUserInfoInput = {
  where: Prisma.BankDetailsWhereUniqueInput
  create: Prisma.XOR<Prisma.BankDetailsCreateWithoutUserInfoInput, Prisma.BankDetailsUncheckedCreateWithoutUserInfoInput>
}

export type BankDetailsCreateManyUserInfoInputEnvelope = {
  data: Prisma.BankDetailsCreateManyUserInfoInput | Prisma.BankDetailsCreateManyUserInfoInput[]
  skipDuplicates?: boolean
}

export type BankDetailsUpsertWithWhereUniqueWithoutUserInfoInput = {
  where: Prisma.BankDetailsWhereUniqueInput
  update: Prisma.XOR<Prisma.BankDetailsUpdateWithoutUserInfoInput, Prisma.BankDetailsUncheckedUpdateWithoutUserInfoInput>
  create: Prisma.XOR<Prisma.BankDetailsCreateWithoutUserInfoInput, Prisma.BankDetailsUncheckedCreateWithoutUserInfoInput>
}

export type BankDetailsUpdateWithWhereUniqueWithoutUserInfoInput = {
  where: Prisma.BankDetailsWhereUniqueInput
  data: Prisma.XOR<Prisma.BankDetailsUpdateWithoutUserInfoInput, Prisma.BankDetailsUncheckedUpdateWithoutUserInfoInput>
}

export type BankDetailsUpdateManyWithWhereWithoutUserInfoInput = {
  where: Prisma.BankDetailsScalarWhereInput
  data: Prisma.XOR<Prisma.BankDetailsUpdateManyMutationInput, Prisma.BankDetailsUncheckedUpdateManyWithoutUserInfoInput>
}

export type BankDetailsScalarWhereInput = {
  AND?: Prisma.BankDetailsScalarWhereInput | Prisma.BankDetailsScalarWhereInput[]
  OR?: Prisma.BankDetailsScalarWhereInput[]
  NOT?: Prisma.BankDetailsScalarWhereInput | Prisma.BankDetailsScalarWhereInput[]
  id?: Prisma.StringFilter<"BankDetails"> | string
  bankName?: Prisma.StringFilter<"BankDetails"> | string
  accountNumber?: Prisma.StringFilter<"BankDetails"> | string
  branch?: Prisma.StringFilter<"BankDetails"> | string
  name?: Prisma.StringFilter<"BankDetails"> | string
  userInfoId?: Prisma.StringFilter<"BankDetails"> | string
}

export type BankDetailsCreateManyUserInfoInput = {
  id?: string
  bankName: string
  accountNumber: string
  branch: string
  name: string
}

export type BankDetailsUpdateWithoutUserInfoInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  bankName?: Prisma.StringFieldUpdateOperationsInput | string
  accountNumber?: Prisma.StringFieldUpdateOperationsInput | string
  branch?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type BankDetailsUncheckedUpdateWithoutUserInfoInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  bankName?: Prisma.StringFieldUpdateOperationsInput | string
  accountNumber?: Prisma.StringFieldUpdateOperationsInput | string
  branch?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type BankDetailsUncheckedUpdateManyWithoutUserInfoInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  bankName?: Prisma.StringFieldUpdateOperationsInput | string
  accountNumber?: Prisma.StringFieldUpdateOperationsInput | string
  branch?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}



export type BankDetailsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  bankName?: boolean
  accountNumber?: boolean
  branch?: boolean
  name?: boolean
  userInfoId?: boolean
  userInfo?: boolean | Prisma.UserInfoDefaultArgs<ExtArgs>
}, ExtArgs["result"]["bankDetails"]>

export type BankDetailsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  bankName?: boolean
  accountNumber?: boolean
  branch?: boolean
  name?: boolean
  userInfoId?: boolean
  userInfo?: boolean | Prisma.UserInfoDefaultArgs<ExtArgs>
}, ExtArgs["result"]["bankDetails"]>

export type BankDetailsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  bankName?: boolean
  accountNumber?: boolean
  branch?: boolean
  name?: boolean
  userInfoId?: boolean
  userInfo?: boolean | Prisma.UserInfoDefaultArgs<ExtArgs>
}, ExtArgs["result"]["bankDetails"]>

export type BankDetailsSelectScalar = {
  id?: boolean
  bankName?: boolean
  accountNumber?: boolean
  branch?: boolean
  name?: boolean
  userInfoId?: boolean
}

export type BankDetailsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "bankName" | "accountNumber" | "branch" | "name" | "userInfoId", ExtArgs["result"]["bankDetails"]>
export type BankDetailsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  userInfo?: boolean | Prisma.UserInfoDefaultArgs<ExtArgs>
}
export type BankDetailsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  userInfo?: boolean | Prisma.UserInfoDefaultArgs<ExtArgs>
}
export type BankDetailsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  userInfo?: boolean | Prisma.UserInfoDefaultArgs<ExtArgs>
}

export type $BankDetailsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "BankDetails"
  objects: {
    userInfo: Prisma.$UserInfoPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    bankName: string
    accountNumber: string
    branch: string
    name: string
    userInfoId: string
  }, ExtArgs["result"]["bankDetails"]>
  composites: {}
}

export type BankDetailsGetPayload<S extends boolean | null | undefined | BankDetailsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$BankDetailsPayload, S>

export type BankDetailsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<BankDetailsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: BankDetailsCountAggregateInputType | true
  }

export interface BankDetailsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BankDetails'], meta: { name: 'BankDetails' } }
  /**
   * Find zero or one BankDetails that matches the filter.
   * @param {BankDetailsFindUniqueArgs} args - Arguments to find a BankDetails
   * @example
   * // Get one BankDetails
   * const bankDetails = await prisma.bankDetails.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BankDetailsFindUniqueArgs>(args: Prisma.SelectSubset<T, BankDetailsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__BankDetailsClient<runtime.Types.Result.GetResult<Prisma.$BankDetailsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one BankDetails that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BankDetailsFindUniqueOrThrowArgs} args - Arguments to find a BankDetails
   * @example
   * // Get one BankDetails
   * const bankDetails = await prisma.bankDetails.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BankDetailsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, BankDetailsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__BankDetailsClient<runtime.Types.Result.GetResult<Prisma.$BankDetailsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first BankDetails that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BankDetailsFindFirstArgs} args - Arguments to find a BankDetails
   * @example
   * // Get one BankDetails
   * const bankDetails = await prisma.bankDetails.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BankDetailsFindFirstArgs>(args?: Prisma.SelectSubset<T, BankDetailsFindFirstArgs<ExtArgs>>): Prisma.Prisma__BankDetailsClient<runtime.Types.Result.GetResult<Prisma.$BankDetailsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first BankDetails that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BankDetailsFindFirstOrThrowArgs} args - Arguments to find a BankDetails
   * @example
   * // Get one BankDetails
   * const bankDetails = await prisma.bankDetails.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BankDetailsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, BankDetailsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__BankDetailsClient<runtime.Types.Result.GetResult<Prisma.$BankDetailsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more BankDetails that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BankDetailsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all BankDetails
   * const bankDetails = await prisma.bankDetails.findMany()
   * 
   * // Get first 10 BankDetails
   * const bankDetails = await prisma.bankDetails.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const bankDetailsWithIdOnly = await prisma.bankDetails.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends BankDetailsFindManyArgs>(args?: Prisma.SelectSubset<T, BankDetailsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BankDetailsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a BankDetails.
   * @param {BankDetailsCreateArgs} args - Arguments to create a BankDetails.
   * @example
   * // Create one BankDetails
   * const BankDetails = await prisma.bankDetails.create({
   *   data: {
   *     // ... data to create a BankDetails
   *   }
   * })
   * 
   */
  create<T extends BankDetailsCreateArgs>(args: Prisma.SelectSubset<T, BankDetailsCreateArgs<ExtArgs>>): Prisma.Prisma__BankDetailsClient<runtime.Types.Result.GetResult<Prisma.$BankDetailsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many BankDetails.
   * @param {BankDetailsCreateManyArgs} args - Arguments to create many BankDetails.
   * @example
   * // Create many BankDetails
   * const bankDetails = await prisma.bankDetails.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends BankDetailsCreateManyArgs>(args?: Prisma.SelectSubset<T, BankDetailsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many BankDetails and returns the data saved in the database.
   * @param {BankDetailsCreateManyAndReturnArgs} args - Arguments to create many BankDetails.
   * @example
   * // Create many BankDetails
   * const bankDetails = await prisma.bankDetails.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many BankDetails and only return the `id`
   * const bankDetailsWithIdOnly = await prisma.bankDetails.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends BankDetailsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, BankDetailsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BankDetailsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a BankDetails.
   * @param {BankDetailsDeleteArgs} args - Arguments to delete one BankDetails.
   * @example
   * // Delete one BankDetails
   * const BankDetails = await prisma.bankDetails.delete({
   *   where: {
   *     // ... filter to delete one BankDetails
   *   }
   * })
   * 
   */
  delete<T extends BankDetailsDeleteArgs>(args: Prisma.SelectSubset<T, BankDetailsDeleteArgs<ExtArgs>>): Prisma.Prisma__BankDetailsClient<runtime.Types.Result.GetResult<Prisma.$BankDetailsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one BankDetails.
   * @param {BankDetailsUpdateArgs} args - Arguments to update one BankDetails.
   * @example
   * // Update one BankDetails
   * const bankDetails = await prisma.bankDetails.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends BankDetailsUpdateArgs>(args: Prisma.SelectSubset<T, BankDetailsUpdateArgs<ExtArgs>>): Prisma.Prisma__BankDetailsClient<runtime.Types.Result.GetResult<Prisma.$BankDetailsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more BankDetails.
   * @param {BankDetailsDeleteManyArgs} args - Arguments to filter BankDetails to delete.
   * @example
   * // Delete a few BankDetails
   * const { count } = await prisma.bankDetails.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends BankDetailsDeleteManyArgs>(args?: Prisma.SelectSubset<T, BankDetailsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more BankDetails.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BankDetailsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many BankDetails
   * const bankDetails = await prisma.bankDetails.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends BankDetailsUpdateManyArgs>(args: Prisma.SelectSubset<T, BankDetailsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more BankDetails and returns the data updated in the database.
   * @param {BankDetailsUpdateManyAndReturnArgs} args - Arguments to update many BankDetails.
   * @example
   * // Update many BankDetails
   * const bankDetails = await prisma.bankDetails.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more BankDetails and only return the `id`
   * const bankDetailsWithIdOnly = await prisma.bankDetails.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends BankDetailsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, BankDetailsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BankDetailsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one BankDetails.
   * @param {BankDetailsUpsertArgs} args - Arguments to update or create a BankDetails.
   * @example
   * // Update or create a BankDetails
   * const bankDetails = await prisma.bankDetails.upsert({
   *   create: {
   *     // ... data to create a BankDetails
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the BankDetails we want to update
   *   }
   * })
   */
  upsert<T extends BankDetailsUpsertArgs>(args: Prisma.SelectSubset<T, BankDetailsUpsertArgs<ExtArgs>>): Prisma.Prisma__BankDetailsClient<runtime.Types.Result.GetResult<Prisma.$BankDetailsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of BankDetails.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BankDetailsCountArgs} args - Arguments to filter BankDetails to count.
   * @example
   * // Count the number of BankDetails
   * const count = await prisma.bankDetails.count({
   *   where: {
   *     // ... the filter for the BankDetails we want to count
   *   }
   * })
  **/
  count<T extends BankDetailsCountArgs>(
    args?: Prisma.Subset<T, BankDetailsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BankDetailsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a BankDetails.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BankDetailsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends BankDetailsAggregateArgs>(args: Prisma.Subset<T, BankDetailsAggregateArgs>): Prisma.PrismaPromise<GetBankDetailsAggregateType<T>>

  /**
   * Group by BankDetails.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BankDetailsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends BankDetailsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BankDetailsGroupByArgs['orderBy'] }
      : { orderBy?: BankDetailsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, BankDetailsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBankDetailsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the BankDetails model
 */
readonly fields: BankDetailsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for BankDetails.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BankDetailsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  userInfo<T extends Prisma.UserInfoDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserInfoDefaultArgs<ExtArgs>>): Prisma.Prisma__UserInfoClient<runtime.Types.Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the BankDetails model
 */
export interface BankDetailsFieldRefs {
  readonly id: Prisma.FieldRef<"BankDetails", 'String'>
  readonly bankName: Prisma.FieldRef<"BankDetails", 'String'>
  readonly accountNumber: Prisma.FieldRef<"BankDetails", 'String'>
  readonly branch: Prisma.FieldRef<"BankDetails", 'String'>
  readonly name: Prisma.FieldRef<"BankDetails", 'String'>
  readonly userInfoId: Prisma.FieldRef<"BankDetails", 'String'>
}
    

// Custom InputTypes
/**
 * BankDetails findUnique
 */
export type BankDetailsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankDetails
   */
  select?: Prisma.BankDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BankDetails
   */
  omit?: Prisma.BankDetailsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankDetailsInclude<ExtArgs> | null
  /**
   * Filter, which BankDetails to fetch.
   */
  where: Prisma.BankDetailsWhereUniqueInput
}

/**
 * BankDetails findUniqueOrThrow
 */
export type BankDetailsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankDetails
   */
  select?: Prisma.BankDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BankDetails
   */
  omit?: Prisma.BankDetailsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankDetailsInclude<ExtArgs> | null
  /**
   * Filter, which BankDetails to fetch.
   */
  where: Prisma.BankDetailsWhereUniqueInput
}

/**
 * BankDetails findFirst
 */
export type BankDetailsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankDetails
   */
  select?: Prisma.BankDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BankDetails
   */
  omit?: Prisma.BankDetailsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankDetailsInclude<ExtArgs> | null
  /**
   * Filter, which BankDetails to fetch.
   */
  where?: Prisma.BankDetailsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BankDetails to fetch.
   */
  orderBy?: Prisma.BankDetailsOrderByWithRelationInput | Prisma.BankDetailsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for BankDetails.
   */
  cursor?: Prisma.BankDetailsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BankDetails from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BankDetails.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of BankDetails.
   */
  distinct?: Prisma.BankDetailsScalarFieldEnum | Prisma.BankDetailsScalarFieldEnum[]
}

/**
 * BankDetails findFirstOrThrow
 */
export type BankDetailsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankDetails
   */
  select?: Prisma.BankDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BankDetails
   */
  omit?: Prisma.BankDetailsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankDetailsInclude<ExtArgs> | null
  /**
   * Filter, which BankDetails to fetch.
   */
  where?: Prisma.BankDetailsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BankDetails to fetch.
   */
  orderBy?: Prisma.BankDetailsOrderByWithRelationInput | Prisma.BankDetailsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for BankDetails.
   */
  cursor?: Prisma.BankDetailsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BankDetails from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BankDetails.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of BankDetails.
   */
  distinct?: Prisma.BankDetailsScalarFieldEnum | Prisma.BankDetailsScalarFieldEnum[]
}

/**
 * BankDetails findMany
 */
export type BankDetailsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankDetails
   */
  select?: Prisma.BankDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BankDetails
   */
  omit?: Prisma.BankDetailsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankDetailsInclude<ExtArgs> | null
  /**
   * Filter, which BankDetails to fetch.
   */
  where?: Prisma.BankDetailsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BankDetails to fetch.
   */
  orderBy?: Prisma.BankDetailsOrderByWithRelationInput | Prisma.BankDetailsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing BankDetails.
   */
  cursor?: Prisma.BankDetailsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BankDetails from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BankDetails.
   */
  skip?: number
  distinct?: Prisma.BankDetailsScalarFieldEnum | Prisma.BankDetailsScalarFieldEnum[]
}

/**
 * BankDetails create
 */
export type BankDetailsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankDetails
   */
  select?: Prisma.BankDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BankDetails
   */
  omit?: Prisma.BankDetailsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankDetailsInclude<ExtArgs> | null
  /**
   * The data needed to create a BankDetails.
   */
  data: Prisma.XOR<Prisma.BankDetailsCreateInput, Prisma.BankDetailsUncheckedCreateInput>
}

/**
 * BankDetails createMany
 */
export type BankDetailsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many BankDetails.
   */
  data: Prisma.BankDetailsCreateManyInput | Prisma.BankDetailsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * BankDetails createManyAndReturn
 */
export type BankDetailsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankDetails
   */
  select?: Prisma.BankDetailsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the BankDetails
   */
  omit?: Prisma.BankDetailsOmit<ExtArgs> | null
  /**
   * The data used to create many BankDetails.
   */
  data: Prisma.BankDetailsCreateManyInput | Prisma.BankDetailsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankDetailsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * BankDetails update
 */
export type BankDetailsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankDetails
   */
  select?: Prisma.BankDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BankDetails
   */
  omit?: Prisma.BankDetailsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankDetailsInclude<ExtArgs> | null
  /**
   * The data needed to update a BankDetails.
   */
  data: Prisma.XOR<Prisma.BankDetailsUpdateInput, Prisma.BankDetailsUncheckedUpdateInput>
  /**
   * Choose, which BankDetails to update.
   */
  where: Prisma.BankDetailsWhereUniqueInput
}

/**
 * BankDetails updateMany
 */
export type BankDetailsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update BankDetails.
   */
  data: Prisma.XOR<Prisma.BankDetailsUpdateManyMutationInput, Prisma.BankDetailsUncheckedUpdateManyInput>
  /**
   * Filter which BankDetails to update
   */
  where?: Prisma.BankDetailsWhereInput
  /**
   * Limit how many BankDetails to update.
   */
  limit?: number
}

/**
 * BankDetails updateManyAndReturn
 */
export type BankDetailsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankDetails
   */
  select?: Prisma.BankDetailsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the BankDetails
   */
  omit?: Prisma.BankDetailsOmit<ExtArgs> | null
  /**
   * The data used to update BankDetails.
   */
  data: Prisma.XOR<Prisma.BankDetailsUpdateManyMutationInput, Prisma.BankDetailsUncheckedUpdateManyInput>
  /**
   * Filter which BankDetails to update
   */
  where?: Prisma.BankDetailsWhereInput
  /**
   * Limit how many BankDetails to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankDetailsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * BankDetails upsert
 */
export type BankDetailsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankDetails
   */
  select?: Prisma.BankDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BankDetails
   */
  omit?: Prisma.BankDetailsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankDetailsInclude<ExtArgs> | null
  /**
   * The filter to search for the BankDetails to update in case it exists.
   */
  where: Prisma.BankDetailsWhereUniqueInput
  /**
   * In case the BankDetails found by the `where` argument doesn't exist, create a new BankDetails with this data.
   */
  create: Prisma.XOR<Prisma.BankDetailsCreateInput, Prisma.BankDetailsUncheckedCreateInput>
  /**
   * In case the BankDetails was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BankDetailsUpdateInput, Prisma.BankDetailsUncheckedUpdateInput>
}

/**
 * BankDetails delete
 */
export type BankDetailsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankDetails
   */
  select?: Prisma.BankDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BankDetails
   */
  omit?: Prisma.BankDetailsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankDetailsInclude<ExtArgs> | null
  /**
   * Filter which BankDetails to delete.
   */
  where: Prisma.BankDetailsWhereUniqueInput
}

/**
 * BankDetails deleteMany
 */
export type BankDetailsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which BankDetails to delete
   */
  where?: Prisma.BankDetailsWhereInput
  /**
   * Limit how many BankDetails to delete.
   */
  limit?: number
}

/**
 * BankDetails without action
 */
export type BankDetailsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankDetails
   */
  select?: Prisma.BankDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BankDetails
   */
  omit?: Prisma.BankDetailsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankDetailsInclude<ExtArgs> | null
}
