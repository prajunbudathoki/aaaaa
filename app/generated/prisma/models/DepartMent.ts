
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `DepartMent` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model DepartMent
 * 
 */
export type DepartMentModel = runtime.Types.Result.DefaultSelection<Prisma.$DepartMentPayload>

export type AggregateDepartMent = {
  _count: DepartMentCountAggregateOutputType | null
  _min: DepartMentMinAggregateOutputType | null
  _max: DepartMentMaxAggregateOutputType | null
}

export type DepartMentMinAggregateOutputType = {
  id: string | null
  name: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type DepartMentMaxAggregateOutputType = {
  id: string | null
  name: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type DepartMentCountAggregateOutputType = {
  id: number
  name: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type DepartMentMinAggregateInputType = {
  id?: true
  name?: true
  createdAt?: true
  updatedAt?: true
}

export type DepartMentMaxAggregateInputType = {
  id?: true
  name?: true
  createdAt?: true
  updatedAt?: true
}

export type DepartMentCountAggregateInputType = {
  id?: true
  name?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type DepartMentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DepartMent to aggregate.
   */
  where?: Prisma.DepartMentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DepartMents to fetch.
   */
  orderBy?: Prisma.DepartMentOrderByWithRelationInput | Prisma.DepartMentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DepartMentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DepartMents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DepartMents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned DepartMents
  **/
  _count?: true | DepartMentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DepartMentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DepartMentMaxAggregateInputType
}

export type GetDepartMentAggregateType<T extends DepartMentAggregateArgs> = {
      [P in keyof T & keyof AggregateDepartMent]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDepartMent[P]>
    : Prisma.GetScalarType<T[P], AggregateDepartMent[P]>
}




export type DepartMentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DepartMentWhereInput
  orderBy?: Prisma.DepartMentOrderByWithAggregationInput | Prisma.DepartMentOrderByWithAggregationInput[]
  by: Prisma.DepartMentScalarFieldEnum[] | Prisma.DepartMentScalarFieldEnum
  having?: Prisma.DepartMentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DepartMentCountAggregateInputType | true
  _min?: DepartMentMinAggregateInputType
  _max?: DepartMentMaxAggregateInputType
}

export type DepartMentGroupByOutputType = {
  id: string
  name: string
  createdAt: Date
  updatedAt: Date
  _count: DepartMentCountAggregateOutputType | null
  _min: DepartMentMinAggregateOutputType | null
  _max: DepartMentMaxAggregateOutputType | null
}

type GetDepartMentGroupByPayload<T extends DepartMentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DepartMentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DepartMentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DepartMentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DepartMentGroupByOutputType[P]>
      }
    >
  > 



export type DepartMentWhereInput = {
  AND?: Prisma.DepartMentWhereInput | Prisma.DepartMentWhereInput[]
  OR?: Prisma.DepartMentWhereInput[]
  NOT?: Prisma.DepartMentWhereInput | Prisma.DepartMentWhereInput[]
  id?: Prisma.StringFilter<"DepartMent"> | string
  name?: Prisma.StringFilter<"DepartMent"> | string
  createdAt?: Prisma.DateTimeFilter<"DepartMent"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DepartMent"> | Date | string
  users?: Prisma.UserListRelationFilter
}

export type DepartMentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  users?: Prisma.UserOrderByRelationAggregateInput
}

export type DepartMentWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.DepartMentWhereInput | Prisma.DepartMentWhereInput[]
  OR?: Prisma.DepartMentWhereInput[]
  NOT?: Prisma.DepartMentWhereInput | Prisma.DepartMentWhereInput[]
  name?: Prisma.StringFilter<"DepartMent"> | string
  createdAt?: Prisma.DateTimeFilter<"DepartMent"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DepartMent"> | Date | string
  users?: Prisma.UserListRelationFilter
}, "id">

export type DepartMentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.DepartMentCountOrderByAggregateInput
  _max?: Prisma.DepartMentMaxOrderByAggregateInput
  _min?: Prisma.DepartMentMinOrderByAggregateInput
}

export type DepartMentScalarWhereWithAggregatesInput = {
  AND?: Prisma.DepartMentScalarWhereWithAggregatesInput | Prisma.DepartMentScalarWhereWithAggregatesInput[]
  OR?: Prisma.DepartMentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DepartMentScalarWhereWithAggregatesInput | Prisma.DepartMentScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"DepartMent"> | string
  name?: Prisma.StringWithAggregatesFilter<"DepartMent"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"DepartMent"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"DepartMent"> | Date | string
}

export type DepartMentCreateInput = {
  id: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  users?: Prisma.UserCreateNestedManyWithoutDepartMentInput
}

export type DepartMentUncheckedCreateInput = {
  id: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  users?: Prisma.UserUncheckedCreateNestedManyWithoutDepartMentInput
}

export type DepartMentUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  users?: Prisma.UserUpdateManyWithoutDepartMentNestedInput
}

export type DepartMentUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  users?: Prisma.UserUncheckedUpdateManyWithoutDepartMentNestedInput
}

export type DepartMentCreateManyInput = {
  id: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DepartMentUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DepartMentUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DepartMentListRelationFilter = {
  every?: Prisma.DepartMentWhereInput
  some?: Prisma.DepartMentWhereInput
  none?: Prisma.DepartMentWhereInput
}

export type DepartMentOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type DepartMentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DepartMentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DepartMentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DepartMentCreateNestedManyWithoutUsersInput = {
  create?: Prisma.XOR<Prisma.DepartMentCreateWithoutUsersInput, Prisma.DepartMentUncheckedCreateWithoutUsersInput> | Prisma.DepartMentCreateWithoutUsersInput[] | Prisma.DepartMentUncheckedCreateWithoutUsersInput[]
  connectOrCreate?: Prisma.DepartMentCreateOrConnectWithoutUsersInput | Prisma.DepartMentCreateOrConnectWithoutUsersInput[]
  connect?: Prisma.DepartMentWhereUniqueInput | Prisma.DepartMentWhereUniqueInput[]
}

export type DepartMentUncheckedCreateNestedManyWithoutUsersInput = {
  create?: Prisma.XOR<Prisma.DepartMentCreateWithoutUsersInput, Prisma.DepartMentUncheckedCreateWithoutUsersInput> | Prisma.DepartMentCreateWithoutUsersInput[] | Prisma.DepartMentUncheckedCreateWithoutUsersInput[]
  connectOrCreate?: Prisma.DepartMentCreateOrConnectWithoutUsersInput | Prisma.DepartMentCreateOrConnectWithoutUsersInput[]
  connect?: Prisma.DepartMentWhereUniqueInput | Prisma.DepartMentWhereUniqueInput[]
}

export type DepartMentUpdateManyWithoutUsersNestedInput = {
  create?: Prisma.XOR<Prisma.DepartMentCreateWithoutUsersInput, Prisma.DepartMentUncheckedCreateWithoutUsersInput> | Prisma.DepartMentCreateWithoutUsersInput[] | Prisma.DepartMentUncheckedCreateWithoutUsersInput[]
  connectOrCreate?: Prisma.DepartMentCreateOrConnectWithoutUsersInput | Prisma.DepartMentCreateOrConnectWithoutUsersInput[]
  upsert?: Prisma.DepartMentUpsertWithWhereUniqueWithoutUsersInput | Prisma.DepartMentUpsertWithWhereUniqueWithoutUsersInput[]
  set?: Prisma.DepartMentWhereUniqueInput | Prisma.DepartMentWhereUniqueInput[]
  disconnect?: Prisma.DepartMentWhereUniqueInput | Prisma.DepartMentWhereUniqueInput[]
  delete?: Prisma.DepartMentWhereUniqueInput | Prisma.DepartMentWhereUniqueInput[]
  connect?: Prisma.DepartMentWhereUniqueInput | Prisma.DepartMentWhereUniqueInput[]
  update?: Prisma.DepartMentUpdateWithWhereUniqueWithoutUsersInput | Prisma.DepartMentUpdateWithWhereUniqueWithoutUsersInput[]
  updateMany?: Prisma.DepartMentUpdateManyWithWhereWithoutUsersInput | Prisma.DepartMentUpdateManyWithWhereWithoutUsersInput[]
  deleteMany?: Prisma.DepartMentScalarWhereInput | Prisma.DepartMentScalarWhereInput[]
}

export type DepartMentUncheckedUpdateManyWithoutUsersNestedInput = {
  create?: Prisma.XOR<Prisma.DepartMentCreateWithoutUsersInput, Prisma.DepartMentUncheckedCreateWithoutUsersInput> | Prisma.DepartMentCreateWithoutUsersInput[] | Prisma.DepartMentUncheckedCreateWithoutUsersInput[]
  connectOrCreate?: Prisma.DepartMentCreateOrConnectWithoutUsersInput | Prisma.DepartMentCreateOrConnectWithoutUsersInput[]
  upsert?: Prisma.DepartMentUpsertWithWhereUniqueWithoutUsersInput | Prisma.DepartMentUpsertWithWhereUniqueWithoutUsersInput[]
  set?: Prisma.DepartMentWhereUniqueInput | Prisma.DepartMentWhereUniqueInput[]
  disconnect?: Prisma.DepartMentWhereUniqueInput | Prisma.DepartMentWhereUniqueInput[]
  delete?: Prisma.DepartMentWhereUniqueInput | Prisma.DepartMentWhereUniqueInput[]
  connect?: Prisma.DepartMentWhereUniqueInput | Prisma.DepartMentWhereUniqueInput[]
  update?: Prisma.DepartMentUpdateWithWhereUniqueWithoutUsersInput | Prisma.DepartMentUpdateWithWhereUniqueWithoutUsersInput[]
  updateMany?: Prisma.DepartMentUpdateManyWithWhereWithoutUsersInput | Prisma.DepartMentUpdateManyWithWhereWithoutUsersInput[]
  deleteMany?: Prisma.DepartMentScalarWhereInput | Prisma.DepartMentScalarWhereInput[]
}

export type DepartMentCreateWithoutUsersInput = {
  id: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DepartMentUncheckedCreateWithoutUsersInput = {
  id: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DepartMentCreateOrConnectWithoutUsersInput = {
  where: Prisma.DepartMentWhereUniqueInput
  create: Prisma.XOR<Prisma.DepartMentCreateWithoutUsersInput, Prisma.DepartMentUncheckedCreateWithoutUsersInput>
}

export type DepartMentUpsertWithWhereUniqueWithoutUsersInput = {
  where: Prisma.DepartMentWhereUniqueInput
  update: Prisma.XOR<Prisma.DepartMentUpdateWithoutUsersInput, Prisma.DepartMentUncheckedUpdateWithoutUsersInput>
  create: Prisma.XOR<Prisma.DepartMentCreateWithoutUsersInput, Prisma.DepartMentUncheckedCreateWithoutUsersInput>
}

export type DepartMentUpdateWithWhereUniqueWithoutUsersInput = {
  where: Prisma.DepartMentWhereUniqueInput
  data: Prisma.XOR<Prisma.DepartMentUpdateWithoutUsersInput, Prisma.DepartMentUncheckedUpdateWithoutUsersInput>
}

export type DepartMentUpdateManyWithWhereWithoutUsersInput = {
  where: Prisma.DepartMentScalarWhereInput
  data: Prisma.XOR<Prisma.DepartMentUpdateManyMutationInput, Prisma.DepartMentUncheckedUpdateManyWithoutUsersInput>
}

export type DepartMentScalarWhereInput = {
  AND?: Prisma.DepartMentScalarWhereInput | Prisma.DepartMentScalarWhereInput[]
  OR?: Prisma.DepartMentScalarWhereInput[]
  NOT?: Prisma.DepartMentScalarWhereInput | Prisma.DepartMentScalarWhereInput[]
  id?: Prisma.StringFilter<"DepartMent"> | string
  name?: Prisma.StringFilter<"DepartMent"> | string
  createdAt?: Prisma.DateTimeFilter<"DepartMent"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DepartMent"> | Date | string
}

export type DepartMentUpdateWithoutUsersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DepartMentUncheckedUpdateWithoutUsersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DepartMentUncheckedUpdateManyWithoutUsersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type DepartMentCountOutputType
 */

export type DepartMentCountOutputType = {
  users: number
}

export type DepartMentCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  users?: boolean | DepartMentCountOutputTypeCountUsersArgs
}

/**
 * DepartMentCountOutputType without action
 */
export type DepartMentCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DepartMentCountOutputType
   */
  select?: Prisma.DepartMentCountOutputTypeSelect<ExtArgs> | null
}

/**
 * DepartMentCountOutputType without action
 */
export type DepartMentCountOutputTypeCountUsersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserWhereInput
}


export type DepartMentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  users?: boolean | Prisma.DepartMent$usersArgs<ExtArgs>
  _count?: boolean | Prisma.DepartMentCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["departMent"]>

export type DepartMentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["departMent"]>

export type DepartMentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["departMent"]>

export type DepartMentSelectScalar = {
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type DepartMentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["departMent"]>
export type DepartMentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  users?: boolean | Prisma.DepartMent$usersArgs<ExtArgs>
  _count?: boolean | Prisma.DepartMentCountOutputTypeDefaultArgs<ExtArgs>
}
export type DepartMentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type DepartMentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $DepartMentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "DepartMent"
  objects: {
    users: Prisma.$UserPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["departMent"]>
  composites: {}
}

export type DepartMentGetPayload<S extends boolean | null | undefined | DepartMentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DepartMentPayload, S>

export type DepartMentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DepartMentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DepartMentCountAggregateInputType | true
  }

export interface DepartMentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DepartMent'], meta: { name: 'DepartMent' } }
  /**
   * Find zero or one DepartMent that matches the filter.
   * @param {DepartMentFindUniqueArgs} args - Arguments to find a DepartMent
   * @example
   * // Get one DepartMent
   * const departMent = await prisma.departMent.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DepartMentFindUniqueArgs>(args: Prisma.SelectSubset<T, DepartMentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DepartMentClient<runtime.Types.Result.GetResult<Prisma.$DepartMentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one DepartMent that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DepartMentFindUniqueOrThrowArgs} args - Arguments to find a DepartMent
   * @example
   * // Get one DepartMent
   * const departMent = await prisma.departMent.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DepartMentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DepartMentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DepartMentClient<runtime.Types.Result.GetResult<Prisma.$DepartMentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DepartMent that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DepartMentFindFirstArgs} args - Arguments to find a DepartMent
   * @example
   * // Get one DepartMent
   * const departMent = await prisma.departMent.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DepartMentFindFirstArgs>(args?: Prisma.SelectSubset<T, DepartMentFindFirstArgs<ExtArgs>>): Prisma.Prisma__DepartMentClient<runtime.Types.Result.GetResult<Prisma.$DepartMentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DepartMent that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DepartMentFindFirstOrThrowArgs} args - Arguments to find a DepartMent
   * @example
   * // Get one DepartMent
   * const departMent = await prisma.departMent.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DepartMentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DepartMentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DepartMentClient<runtime.Types.Result.GetResult<Prisma.$DepartMentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more DepartMents that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DepartMentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DepartMents
   * const departMents = await prisma.departMent.findMany()
   * 
   * // Get first 10 DepartMents
   * const departMents = await prisma.departMent.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const departMentWithIdOnly = await prisma.departMent.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DepartMentFindManyArgs>(args?: Prisma.SelectSubset<T, DepartMentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DepartMentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a DepartMent.
   * @param {DepartMentCreateArgs} args - Arguments to create a DepartMent.
   * @example
   * // Create one DepartMent
   * const DepartMent = await prisma.departMent.create({
   *   data: {
   *     // ... data to create a DepartMent
   *   }
   * })
   * 
   */
  create<T extends DepartMentCreateArgs>(args: Prisma.SelectSubset<T, DepartMentCreateArgs<ExtArgs>>): Prisma.Prisma__DepartMentClient<runtime.Types.Result.GetResult<Prisma.$DepartMentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many DepartMents.
   * @param {DepartMentCreateManyArgs} args - Arguments to create many DepartMents.
   * @example
   * // Create many DepartMents
   * const departMent = await prisma.departMent.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DepartMentCreateManyArgs>(args?: Prisma.SelectSubset<T, DepartMentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many DepartMents and returns the data saved in the database.
   * @param {DepartMentCreateManyAndReturnArgs} args - Arguments to create many DepartMents.
   * @example
   * // Create many DepartMents
   * const departMent = await prisma.departMent.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many DepartMents and only return the `id`
   * const departMentWithIdOnly = await prisma.departMent.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DepartMentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DepartMentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DepartMentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a DepartMent.
   * @param {DepartMentDeleteArgs} args - Arguments to delete one DepartMent.
   * @example
   * // Delete one DepartMent
   * const DepartMent = await prisma.departMent.delete({
   *   where: {
   *     // ... filter to delete one DepartMent
   *   }
   * })
   * 
   */
  delete<T extends DepartMentDeleteArgs>(args: Prisma.SelectSubset<T, DepartMentDeleteArgs<ExtArgs>>): Prisma.Prisma__DepartMentClient<runtime.Types.Result.GetResult<Prisma.$DepartMentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one DepartMent.
   * @param {DepartMentUpdateArgs} args - Arguments to update one DepartMent.
   * @example
   * // Update one DepartMent
   * const departMent = await prisma.departMent.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DepartMentUpdateArgs>(args: Prisma.SelectSubset<T, DepartMentUpdateArgs<ExtArgs>>): Prisma.Prisma__DepartMentClient<runtime.Types.Result.GetResult<Prisma.$DepartMentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more DepartMents.
   * @param {DepartMentDeleteManyArgs} args - Arguments to filter DepartMents to delete.
   * @example
   * // Delete a few DepartMents
   * const { count } = await prisma.departMent.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DepartMentDeleteManyArgs>(args?: Prisma.SelectSubset<T, DepartMentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DepartMents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DepartMentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DepartMents
   * const departMent = await prisma.departMent.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DepartMentUpdateManyArgs>(args: Prisma.SelectSubset<T, DepartMentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DepartMents and returns the data updated in the database.
   * @param {DepartMentUpdateManyAndReturnArgs} args - Arguments to update many DepartMents.
   * @example
   * // Update many DepartMents
   * const departMent = await prisma.departMent.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more DepartMents and only return the `id`
   * const departMentWithIdOnly = await prisma.departMent.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DepartMentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DepartMentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DepartMentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one DepartMent.
   * @param {DepartMentUpsertArgs} args - Arguments to update or create a DepartMent.
   * @example
   * // Update or create a DepartMent
   * const departMent = await prisma.departMent.upsert({
   *   create: {
   *     // ... data to create a DepartMent
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the DepartMent we want to update
   *   }
   * })
   */
  upsert<T extends DepartMentUpsertArgs>(args: Prisma.SelectSubset<T, DepartMentUpsertArgs<ExtArgs>>): Prisma.Prisma__DepartMentClient<runtime.Types.Result.GetResult<Prisma.$DepartMentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of DepartMents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DepartMentCountArgs} args - Arguments to filter DepartMents to count.
   * @example
   * // Count the number of DepartMents
   * const count = await prisma.departMent.count({
   *   where: {
   *     // ... the filter for the DepartMents we want to count
   *   }
   * })
  **/
  count<T extends DepartMentCountArgs>(
    args?: Prisma.Subset<T, DepartMentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DepartMentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a DepartMent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DepartMentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DepartMentAggregateArgs>(args: Prisma.Subset<T, DepartMentAggregateArgs>): Prisma.PrismaPromise<GetDepartMentAggregateType<T>>

  /**
   * Group by DepartMent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DepartMentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DepartMentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DepartMentGroupByArgs['orderBy'] }
      : { orderBy?: DepartMentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DepartMentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartMentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the DepartMent model
 */
readonly fields: DepartMentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for DepartMent.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DepartMentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  users<T extends Prisma.DepartMent$usersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DepartMent$usersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the DepartMent model
 */
export interface DepartMentFieldRefs {
  readonly id: Prisma.FieldRef<"DepartMent", 'String'>
  readonly name: Prisma.FieldRef<"DepartMent", 'String'>
  readonly createdAt: Prisma.FieldRef<"DepartMent", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"DepartMent", 'DateTime'>
}
    

// Custom InputTypes
/**
 * DepartMent findUnique
 */
export type DepartMentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DepartMent
   */
  select?: Prisma.DepartMentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DepartMent
   */
  omit?: Prisma.DepartMentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepartMentInclude<ExtArgs> | null
  /**
   * Filter, which DepartMent to fetch.
   */
  where: Prisma.DepartMentWhereUniqueInput
}

/**
 * DepartMent findUniqueOrThrow
 */
export type DepartMentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DepartMent
   */
  select?: Prisma.DepartMentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DepartMent
   */
  omit?: Prisma.DepartMentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepartMentInclude<ExtArgs> | null
  /**
   * Filter, which DepartMent to fetch.
   */
  where: Prisma.DepartMentWhereUniqueInput
}

/**
 * DepartMent findFirst
 */
export type DepartMentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DepartMent
   */
  select?: Prisma.DepartMentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DepartMent
   */
  omit?: Prisma.DepartMentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepartMentInclude<ExtArgs> | null
  /**
   * Filter, which DepartMent to fetch.
   */
  where?: Prisma.DepartMentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DepartMents to fetch.
   */
  orderBy?: Prisma.DepartMentOrderByWithRelationInput | Prisma.DepartMentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DepartMents.
   */
  cursor?: Prisma.DepartMentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DepartMents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DepartMents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DepartMents.
   */
  distinct?: Prisma.DepartMentScalarFieldEnum | Prisma.DepartMentScalarFieldEnum[]
}

/**
 * DepartMent findFirstOrThrow
 */
export type DepartMentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DepartMent
   */
  select?: Prisma.DepartMentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DepartMent
   */
  omit?: Prisma.DepartMentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepartMentInclude<ExtArgs> | null
  /**
   * Filter, which DepartMent to fetch.
   */
  where?: Prisma.DepartMentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DepartMents to fetch.
   */
  orderBy?: Prisma.DepartMentOrderByWithRelationInput | Prisma.DepartMentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DepartMents.
   */
  cursor?: Prisma.DepartMentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DepartMents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DepartMents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DepartMents.
   */
  distinct?: Prisma.DepartMentScalarFieldEnum | Prisma.DepartMentScalarFieldEnum[]
}

/**
 * DepartMent findMany
 */
export type DepartMentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DepartMent
   */
  select?: Prisma.DepartMentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DepartMent
   */
  omit?: Prisma.DepartMentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepartMentInclude<ExtArgs> | null
  /**
   * Filter, which DepartMents to fetch.
   */
  where?: Prisma.DepartMentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DepartMents to fetch.
   */
  orderBy?: Prisma.DepartMentOrderByWithRelationInput | Prisma.DepartMentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing DepartMents.
   */
  cursor?: Prisma.DepartMentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DepartMents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DepartMents.
   */
  skip?: number
  distinct?: Prisma.DepartMentScalarFieldEnum | Prisma.DepartMentScalarFieldEnum[]
}

/**
 * DepartMent create
 */
export type DepartMentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DepartMent
   */
  select?: Prisma.DepartMentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DepartMent
   */
  omit?: Prisma.DepartMentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepartMentInclude<ExtArgs> | null
  /**
   * The data needed to create a DepartMent.
   */
  data: Prisma.XOR<Prisma.DepartMentCreateInput, Prisma.DepartMentUncheckedCreateInput>
}

/**
 * DepartMent createMany
 */
export type DepartMentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many DepartMents.
   */
  data: Prisma.DepartMentCreateManyInput | Prisma.DepartMentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * DepartMent createManyAndReturn
 */
export type DepartMentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DepartMent
   */
  select?: Prisma.DepartMentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DepartMent
   */
  omit?: Prisma.DepartMentOmit<ExtArgs> | null
  /**
   * The data used to create many DepartMents.
   */
  data: Prisma.DepartMentCreateManyInput | Prisma.DepartMentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * DepartMent update
 */
export type DepartMentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DepartMent
   */
  select?: Prisma.DepartMentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DepartMent
   */
  omit?: Prisma.DepartMentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepartMentInclude<ExtArgs> | null
  /**
   * The data needed to update a DepartMent.
   */
  data: Prisma.XOR<Prisma.DepartMentUpdateInput, Prisma.DepartMentUncheckedUpdateInput>
  /**
   * Choose, which DepartMent to update.
   */
  where: Prisma.DepartMentWhereUniqueInput
}

/**
 * DepartMent updateMany
 */
export type DepartMentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update DepartMents.
   */
  data: Prisma.XOR<Prisma.DepartMentUpdateManyMutationInput, Prisma.DepartMentUncheckedUpdateManyInput>
  /**
   * Filter which DepartMents to update
   */
  where?: Prisma.DepartMentWhereInput
  /**
   * Limit how many DepartMents to update.
   */
  limit?: number
}

/**
 * DepartMent updateManyAndReturn
 */
export type DepartMentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DepartMent
   */
  select?: Prisma.DepartMentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DepartMent
   */
  omit?: Prisma.DepartMentOmit<ExtArgs> | null
  /**
   * The data used to update DepartMents.
   */
  data: Prisma.XOR<Prisma.DepartMentUpdateManyMutationInput, Prisma.DepartMentUncheckedUpdateManyInput>
  /**
   * Filter which DepartMents to update
   */
  where?: Prisma.DepartMentWhereInput
  /**
   * Limit how many DepartMents to update.
   */
  limit?: number
}

/**
 * DepartMent upsert
 */
export type DepartMentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DepartMent
   */
  select?: Prisma.DepartMentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DepartMent
   */
  omit?: Prisma.DepartMentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepartMentInclude<ExtArgs> | null
  /**
   * The filter to search for the DepartMent to update in case it exists.
   */
  where: Prisma.DepartMentWhereUniqueInput
  /**
   * In case the DepartMent found by the `where` argument doesn't exist, create a new DepartMent with this data.
   */
  create: Prisma.XOR<Prisma.DepartMentCreateInput, Prisma.DepartMentUncheckedCreateInput>
  /**
   * In case the DepartMent was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DepartMentUpdateInput, Prisma.DepartMentUncheckedUpdateInput>
}

/**
 * DepartMent delete
 */
export type DepartMentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DepartMent
   */
  select?: Prisma.DepartMentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DepartMent
   */
  omit?: Prisma.DepartMentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepartMentInclude<ExtArgs> | null
  /**
   * Filter which DepartMent to delete.
   */
  where: Prisma.DepartMentWhereUniqueInput
}

/**
 * DepartMent deleteMany
 */
export type DepartMentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DepartMents to delete
   */
  where?: Prisma.DepartMentWhereInput
  /**
   * Limit how many DepartMents to delete.
   */
  limit?: number
}

/**
 * DepartMent.users
 */
export type DepartMent$usersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
  orderBy?: Prisma.UserOrderByWithRelationInput | Prisma.UserOrderByWithRelationInput[]
  cursor?: Prisma.UserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[]
}

/**
 * DepartMent without action
 */
export type DepartMentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DepartMent
   */
  select?: Prisma.DepartMentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DepartMent
   */
  omit?: Prisma.DepartMentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepartMentInclude<ExtArgs> | null
}
