
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `ProjectGroup` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model ProjectGroup
 * 
 */
export type ProjectGroupModel = runtime.Types.Result.DefaultSelection<Prisma.$ProjectGroupPayload>

export type AggregateProjectGroup = {
  _count: ProjectGroupCountAggregateOutputType | null
  _min: ProjectGroupMinAggregateOutputType | null
  _max: ProjectGroupMaxAggregateOutputType | null
}

export type ProjectGroupMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  projectId: string | null
}

export type ProjectGroupMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  projectId: string | null
}

export type ProjectGroupCountAggregateOutputType = {
  id: number
  name: number
  description: number
  projectId: number
  _all: number
}


export type ProjectGroupMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  projectId?: true
}

export type ProjectGroupMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  projectId?: true
}

export type ProjectGroupCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  projectId?: true
  _all?: true
}

export type ProjectGroupAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProjectGroup to aggregate.
   */
  where?: Prisma.ProjectGroupWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProjectGroups to fetch.
   */
  orderBy?: Prisma.ProjectGroupOrderByWithRelationInput | Prisma.ProjectGroupOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProjectGroupWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProjectGroups from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProjectGroups.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProjectGroups
  **/
  _count?: true | ProjectGroupCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProjectGroupMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProjectGroupMaxAggregateInputType
}

export type GetProjectGroupAggregateType<T extends ProjectGroupAggregateArgs> = {
      [P in keyof T & keyof AggregateProjectGroup]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProjectGroup[P]>
    : Prisma.GetScalarType<T[P], AggregateProjectGroup[P]>
}




export type ProjectGroupGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProjectGroupWhereInput
  orderBy?: Prisma.ProjectGroupOrderByWithAggregationInput | Prisma.ProjectGroupOrderByWithAggregationInput[]
  by: Prisma.ProjectGroupScalarFieldEnum[] | Prisma.ProjectGroupScalarFieldEnum
  having?: Prisma.ProjectGroupScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProjectGroupCountAggregateInputType | true
  _min?: ProjectGroupMinAggregateInputType
  _max?: ProjectGroupMaxAggregateInputType
}

export type ProjectGroupGroupByOutputType = {
  id: string
  name: string
  description: string
  projectId: string
  _count: ProjectGroupCountAggregateOutputType | null
  _min: ProjectGroupMinAggregateOutputType | null
  _max: ProjectGroupMaxAggregateOutputType | null
}

type GetProjectGroupGroupByPayload<T extends ProjectGroupGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProjectGroupGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProjectGroupGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProjectGroupGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProjectGroupGroupByOutputType[P]>
      }
    >
  > 



export type ProjectGroupWhereInput = {
  AND?: Prisma.ProjectGroupWhereInput | Prisma.ProjectGroupWhereInput[]
  OR?: Prisma.ProjectGroupWhereInput[]
  NOT?: Prisma.ProjectGroupWhereInput | Prisma.ProjectGroupWhereInput[]
  id?: Prisma.StringFilter<"ProjectGroup"> | string
  name?: Prisma.StringFilter<"ProjectGroup"> | string
  description?: Prisma.StringFilter<"ProjectGroup"> | string
  projectId?: Prisma.StringFilter<"ProjectGroup"> | string
  Project?: Prisma.XOR<Prisma.ProjectScalarRelationFilter, Prisma.ProjectWhereInput>
  tasks?: Prisma.TaskListRelationFilter
}

export type ProjectGroupOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  Project?: Prisma.ProjectOrderByWithRelationInput
  tasks?: Prisma.TaskOrderByRelationAggregateInput
}

export type ProjectGroupWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ProjectGroupWhereInput | Prisma.ProjectGroupWhereInput[]
  OR?: Prisma.ProjectGroupWhereInput[]
  NOT?: Prisma.ProjectGroupWhereInput | Prisma.ProjectGroupWhereInput[]
  name?: Prisma.StringFilter<"ProjectGroup"> | string
  description?: Prisma.StringFilter<"ProjectGroup"> | string
  projectId?: Prisma.StringFilter<"ProjectGroup"> | string
  Project?: Prisma.XOR<Prisma.ProjectScalarRelationFilter, Prisma.ProjectWhereInput>
  tasks?: Prisma.TaskListRelationFilter
}, "id">

export type ProjectGroupOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  _count?: Prisma.ProjectGroupCountOrderByAggregateInput
  _max?: Prisma.ProjectGroupMaxOrderByAggregateInput
  _min?: Prisma.ProjectGroupMinOrderByAggregateInput
}

export type ProjectGroupScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProjectGroupScalarWhereWithAggregatesInput | Prisma.ProjectGroupScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProjectGroupScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProjectGroupScalarWhereWithAggregatesInput | Prisma.ProjectGroupScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ProjectGroup"> | string
  name?: Prisma.StringWithAggregatesFilter<"ProjectGroup"> | string
  description?: Prisma.StringWithAggregatesFilter<"ProjectGroup"> | string
  projectId?: Prisma.StringWithAggregatesFilter<"ProjectGroup"> | string
}

export type ProjectGroupCreateInput = {
  id?: string
  name: string
  description: string
  Project: Prisma.ProjectCreateNestedOneWithoutGroupsInput
  tasks?: Prisma.TaskCreateNestedManyWithoutProjectGroupInput
}

export type ProjectGroupUncheckedCreateInput = {
  id?: string
  name: string
  description: string
  projectId: string
  tasks?: Prisma.TaskUncheckedCreateNestedManyWithoutProjectGroupInput
}

export type ProjectGroupUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  Project?: Prisma.ProjectUpdateOneRequiredWithoutGroupsNestedInput
  tasks?: Prisma.TaskUpdateManyWithoutProjectGroupNestedInput
}

export type ProjectGroupUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  tasks?: Prisma.TaskUncheckedUpdateManyWithoutProjectGroupNestedInput
}

export type ProjectGroupCreateManyInput = {
  id?: string
  name: string
  description: string
  projectId: string
}

export type ProjectGroupUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ProjectGroupUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ProjectGroupListRelationFilter = {
  every?: Prisma.ProjectGroupWhereInput
  some?: Prisma.ProjectGroupWhereInput
  none?: Prisma.ProjectGroupWhereInput
}

export type ProjectGroupOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProjectGroupCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
}

export type ProjectGroupMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
}

export type ProjectGroupMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
}

export type ProjectGroupNullableScalarRelationFilter = {
  is?: Prisma.ProjectGroupWhereInput | null
  isNot?: Prisma.ProjectGroupWhereInput | null
}

export type ProjectGroupCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.ProjectGroupCreateWithoutProjectInput, Prisma.ProjectGroupUncheckedCreateWithoutProjectInput> | Prisma.ProjectGroupCreateWithoutProjectInput[] | Prisma.ProjectGroupUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ProjectGroupCreateOrConnectWithoutProjectInput | Prisma.ProjectGroupCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.ProjectGroupCreateManyProjectInputEnvelope
  connect?: Prisma.ProjectGroupWhereUniqueInput | Prisma.ProjectGroupWhereUniqueInput[]
}

export type ProjectGroupUncheckedCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.ProjectGroupCreateWithoutProjectInput, Prisma.ProjectGroupUncheckedCreateWithoutProjectInput> | Prisma.ProjectGroupCreateWithoutProjectInput[] | Prisma.ProjectGroupUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ProjectGroupCreateOrConnectWithoutProjectInput | Prisma.ProjectGroupCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.ProjectGroupCreateManyProjectInputEnvelope
  connect?: Prisma.ProjectGroupWhereUniqueInput | Prisma.ProjectGroupWhereUniqueInput[]
}

export type ProjectGroupUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectGroupCreateWithoutProjectInput, Prisma.ProjectGroupUncheckedCreateWithoutProjectInput> | Prisma.ProjectGroupCreateWithoutProjectInput[] | Prisma.ProjectGroupUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ProjectGroupCreateOrConnectWithoutProjectInput | Prisma.ProjectGroupCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.ProjectGroupUpsertWithWhereUniqueWithoutProjectInput | Prisma.ProjectGroupUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.ProjectGroupCreateManyProjectInputEnvelope
  set?: Prisma.ProjectGroupWhereUniqueInput | Prisma.ProjectGroupWhereUniqueInput[]
  disconnect?: Prisma.ProjectGroupWhereUniqueInput | Prisma.ProjectGroupWhereUniqueInput[]
  delete?: Prisma.ProjectGroupWhereUniqueInput | Prisma.ProjectGroupWhereUniqueInput[]
  connect?: Prisma.ProjectGroupWhereUniqueInput | Prisma.ProjectGroupWhereUniqueInput[]
  update?: Prisma.ProjectGroupUpdateWithWhereUniqueWithoutProjectInput | Prisma.ProjectGroupUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.ProjectGroupUpdateManyWithWhereWithoutProjectInput | Prisma.ProjectGroupUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.ProjectGroupScalarWhereInput | Prisma.ProjectGroupScalarWhereInput[]
}

export type ProjectGroupUncheckedUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectGroupCreateWithoutProjectInput, Prisma.ProjectGroupUncheckedCreateWithoutProjectInput> | Prisma.ProjectGroupCreateWithoutProjectInput[] | Prisma.ProjectGroupUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ProjectGroupCreateOrConnectWithoutProjectInput | Prisma.ProjectGroupCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.ProjectGroupUpsertWithWhereUniqueWithoutProjectInput | Prisma.ProjectGroupUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.ProjectGroupCreateManyProjectInputEnvelope
  set?: Prisma.ProjectGroupWhereUniqueInput | Prisma.ProjectGroupWhereUniqueInput[]
  disconnect?: Prisma.ProjectGroupWhereUniqueInput | Prisma.ProjectGroupWhereUniqueInput[]
  delete?: Prisma.ProjectGroupWhereUniqueInput | Prisma.ProjectGroupWhereUniqueInput[]
  connect?: Prisma.ProjectGroupWhereUniqueInput | Prisma.ProjectGroupWhereUniqueInput[]
  update?: Prisma.ProjectGroupUpdateWithWhereUniqueWithoutProjectInput | Prisma.ProjectGroupUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.ProjectGroupUpdateManyWithWhereWithoutProjectInput | Prisma.ProjectGroupUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.ProjectGroupScalarWhereInput | Prisma.ProjectGroupScalarWhereInput[]
}

export type ProjectGroupCreateNestedOneWithoutTasksInput = {
  create?: Prisma.XOR<Prisma.ProjectGroupCreateWithoutTasksInput, Prisma.ProjectGroupUncheckedCreateWithoutTasksInput>
  connectOrCreate?: Prisma.ProjectGroupCreateOrConnectWithoutTasksInput
  connect?: Prisma.ProjectGroupWhereUniqueInput
}

export type ProjectGroupUpdateOneWithoutTasksNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectGroupCreateWithoutTasksInput, Prisma.ProjectGroupUncheckedCreateWithoutTasksInput>
  connectOrCreate?: Prisma.ProjectGroupCreateOrConnectWithoutTasksInput
  upsert?: Prisma.ProjectGroupUpsertWithoutTasksInput
  disconnect?: Prisma.ProjectGroupWhereInput | boolean
  delete?: Prisma.ProjectGroupWhereInput | boolean
  connect?: Prisma.ProjectGroupWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProjectGroupUpdateToOneWithWhereWithoutTasksInput, Prisma.ProjectGroupUpdateWithoutTasksInput>, Prisma.ProjectGroupUncheckedUpdateWithoutTasksInput>
}

export type ProjectGroupCreateWithoutProjectInput = {
  id?: string
  name: string
  description: string
  tasks?: Prisma.TaskCreateNestedManyWithoutProjectGroupInput
}

export type ProjectGroupUncheckedCreateWithoutProjectInput = {
  id?: string
  name: string
  description: string
  tasks?: Prisma.TaskUncheckedCreateNestedManyWithoutProjectGroupInput
}

export type ProjectGroupCreateOrConnectWithoutProjectInput = {
  where: Prisma.ProjectGroupWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectGroupCreateWithoutProjectInput, Prisma.ProjectGroupUncheckedCreateWithoutProjectInput>
}

export type ProjectGroupCreateManyProjectInputEnvelope = {
  data: Prisma.ProjectGroupCreateManyProjectInput | Prisma.ProjectGroupCreateManyProjectInput[]
  skipDuplicates?: boolean
}

export type ProjectGroupUpsertWithWhereUniqueWithoutProjectInput = {
  where: Prisma.ProjectGroupWhereUniqueInput
  update: Prisma.XOR<Prisma.ProjectGroupUpdateWithoutProjectInput, Prisma.ProjectGroupUncheckedUpdateWithoutProjectInput>
  create: Prisma.XOR<Prisma.ProjectGroupCreateWithoutProjectInput, Prisma.ProjectGroupUncheckedCreateWithoutProjectInput>
}

export type ProjectGroupUpdateWithWhereUniqueWithoutProjectInput = {
  where: Prisma.ProjectGroupWhereUniqueInput
  data: Prisma.XOR<Prisma.ProjectGroupUpdateWithoutProjectInput, Prisma.ProjectGroupUncheckedUpdateWithoutProjectInput>
}

export type ProjectGroupUpdateManyWithWhereWithoutProjectInput = {
  where: Prisma.ProjectGroupScalarWhereInput
  data: Prisma.XOR<Prisma.ProjectGroupUpdateManyMutationInput, Prisma.ProjectGroupUncheckedUpdateManyWithoutProjectInput>
}

export type ProjectGroupScalarWhereInput = {
  AND?: Prisma.ProjectGroupScalarWhereInput | Prisma.ProjectGroupScalarWhereInput[]
  OR?: Prisma.ProjectGroupScalarWhereInput[]
  NOT?: Prisma.ProjectGroupScalarWhereInput | Prisma.ProjectGroupScalarWhereInput[]
  id?: Prisma.StringFilter<"ProjectGroup"> | string
  name?: Prisma.StringFilter<"ProjectGroup"> | string
  description?: Prisma.StringFilter<"ProjectGroup"> | string
  projectId?: Prisma.StringFilter<"ProjectGroup"> | string
}

export type ProjectGroupCreateWithoutTasksInput = {
  id?: string
  name: string
  description: string
  Project: Prisma.ProjectCreateNestedOneWithoutGroupsInput
}

export type ProjectGroupUncheckedCreateWithoutTasksInput = {
  id?: string
  name: string
  description: string
  projectId: string
}

export type ProjectGroupCreateOrConnectWithoutTasksInput = {
  where: Prisma.ProjectGroupWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectGroupCreateWithoutTasksInput, Prisma.ProjectGroupUncheckedCreateWithoutTasksInput>
}

export type ProjectGroupUpsertWithoutTasksInput = {
  update: Prisma.XOR<Prisma.ProjectGroupUpdateWithoutTasksInput, Prisma.ProjectGroupUncheckedUpdateWithoutTasksInput>
  create: Prisma.XOR<Prisma.ProjectGroupCreateWithoutTasksInput, Prisma.ProjectGroupUncheckedCreateWithoutTasksInput>
  where?: Prisma.ProjectGroupWhereInput
}

export type ProjectGroupUpdateToOneWithWhereWithoutTasksInput = {
  where?: Prisma.ProjectGroupWhereInput
  data: Prisma.XOR<Prisma.ProjectGroupUpdateWithoutTasksInput, Prisma.ProjectGroupUncheckedUpdateWithoutTasksInput>
}

export type ProjectGroupUpdateWithoutTasksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  Project?: Prisma.ProjectUpdateOneRequiredWithoutGroupsNestedInput
}

export type ProjectGroupUncheckedUpdateWithoutTasksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ProjectGroupCreateManyProjectInput = {
  id?: string
  name: string
  description: string
}

export type ProjectGroupUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  tasks?: Prisma.TaskUpdateManyWithoutProjectGroupNestedInput
}

export type ProjectGroupUncheckedUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  tasks?: Prisma.TaskUncheckedUpdateManyWithoutProjectGroupNestedInput
}

export type ProjectGroupUncheckedUpdateManyWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type ProjectGroupCountOutputType
 */

export type ProjectGroupCountOutputType = {
  tasks: number
}

export type ProjectGroupCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tasks?: boolean | ProjectGroupCountOutputTypeCountTasksArgs
}

/**
 * ProjectGroupCountOutputType without action
 */
export type ProjectGroupCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectGroupCountOutputType
   */
  select?: Prisma.ProjectGroupCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ProjectGroupCountOutputType without action
 */
export type ProjectGroupCountOutputTypeCountTasksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TaskWhereInput
}


export type ProjectGroupSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  projectId?: boolean
  Project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  tasks?: boolean | Prisma.ProjectGroup$tasksArgs<ExtArgs>
  _count?: boolean | Prisma.ProjectGroupCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["projectGroup"]>

export type ProjectGroupSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  projectId?: boolean
  Project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}, ExtArgs["result"]["projectGroup"]>

export type ProjectGroupSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  projectId?: boolean
  Project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}, ExtArgs["result"]["projectGroup"]>

export type ProjectGroupSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  projectId?: boolean
}

export type ProjectGroupOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "projectId", ExtArgs["result"]["projectGroup"]>
export type ProjectGroupInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  tasks?: boolean | Prisma.ProjectGroup$tasksArgs<ExtArgs>
  _count?: boolean | Prisma.ProjectGroupCountOutputTypeDefaultArgs<ExtArgs>
}
export type ProjectGroupIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}
export type ProjectGroupIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}

export type $ProjectGroupPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProjectGroup"
  objects: {
    Project: Prisma.$ProjectPayload<ExtArgs>
    tasks: Prisma.$TaskPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    description: string
    projectId: string
  }, ExtArgs["result"]["projectGroup"]>
  composites: {}
}

export type ProjectGroupGetPayload<S extends boolean | null | undefined | ProjectGroupDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProjectGroupPayload, S>

export type ProjectGroupCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProjectGroupFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProjectGroupCountAggregateInputType | true
  }

export interface ProjectGroupDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProjectGroup'], meta: { name: 'ProjectGroup' } }
  /**
   * Find zero or one ProjectGroup that matches the filter.
   * @param {ProjectGroupFindUniqueArgs} args - Arguments to find a ProjectGroup
   * @example
   * // Get one ProjectGroup
   * const projectGroup = await prisma.projectGroup.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProjectGroupFindUniqueArgs>(args: Prisma.SelectSubset<T, ProjectGroupFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProjectGroupClient<runtime.Types.Result.GetResult<Prisma.$ProjectGroupPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProjectGroup that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProjectGroupFindUniqueOrThrowArgs} args - Arguments to find a ProjectGroup
   * @example
   * // Get one ProjectGroup
   * const projectGroup = await prisma.projectGroup.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProjectGroupFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProjectGroupFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProjectGroupClient<runtime.Types.Result.GetResult<Prisma.$ProjectGroupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProjectGroup that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectGroupFindFirstArgs} args - Arguments to find a ProjectGroup
   * @example
   * // Get one ProjectGroup
   * const projectGroup = await prisma.projectGroup.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProjectGroupFindFirstArgs>(args?: Prisma.SelectSubset<T, ProjectGroupFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProjectGroupClient<runtime.Types.Result.GetResult<Prisma.$ProjectGroupPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProjectGroup that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectGroupFindFirstOrThrowArgs} args - Arguments to find a ProjectGroup
   * @example
   * // Get one ProjectGroup
   * const projectGroup = await prisma.projectGroup.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProjectGroupFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProjectGroupFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProjectGroupClient<runtime.Types.Result.GetResult<Prisma.$ProjectGroupPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProjectGroups that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectGroupFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProjectGroups
   * const projectGroups = await prisma.projectGroup.findMany()
   * 
   * // Get first 10 ProjectGroups
   * const projectGroups = await prisma.projectGroup.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const projectGroupWithIdOnly = await prisma.projectGroup.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProjectGroupFindManyArgs>(args?: Prisma.SelectSubset<T, ProjectGroupFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectGroupPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProjectGroup.
   * @param {ProjectGroupCreateArgs} args - Arguments to create a ProjectGroup.
   * @example
   * // Create one ProjectGroup
   * const ProjectGroup = await prisma.projectGroup.create({
   *   data: {
   *     // ... data to create a ProjectGroup
   *   }
   * })
   * 
   */
  create<T extends ProjectGroupCreateArgs>(args: Prisma.SelectSubset<T, ProjectGroupCreateArgs<ExtArgs>>): Prisma.Prisma__ProjectGroupClient<runtime.Types.Result.GetResult<Prisma.$ProjectGroupPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProjectGroups.
   * @param {ProjectGroupCreateManyArgs} args - Arguments to create many ProjectGroups.
   * @example
   * // Create many ProjectGroups
   * const projectGroup = await prisma.projectGroup.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProjectGroupCreateManyArgs>(args?: Prisma.SelectSubset<T, ProjectGroupCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProjectGroups and returns the data saved in the database.
   * @param {ProjectGroupCreateManyAndReturnArgs} args - Arguments to create many ProjectGroups.
   * @example
   * // Create many ProjectGroups
   * const projectGroup = await prisma.projectGroup.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProjectGroups and only return the `id`
   * const projectGroupWithIdOnly = await prisma.projectGroup.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProjectGroupCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProjectGroupCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectGroupPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProjectGroup.
   * @param {ProjectGroupDeleteArgs} args - Arguments to delete one ProjectGroup.
   * @example
   * // Delete one ProjectGroup
   * const ProjectGroup = await prisma.projectGroup.delete({
   *   where: {
   *     // ... filter to delete one ProjectGroup
   *   }
   * })
   * 
   */
  delete<T extends ProjectGroupDeleteArgs>(args: Prisma.SelectSubset<T, ProjectGroupDeleteArgs<ExtArgs>>): Prisma.Prisma__ProjectGroupClient<runtime.Types.Result.GetResult<Prisma.$ProjectGroupPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProjectGroup.
   * @param {ProjectGroupUpdateArgs} args - Arguments to update one ProjectGroup.
   * @example
   * // Update one ProjectGroup
   * const projectGroup = await prisma.projectGroup.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProjectGroupUpdateArgs>(args: Prisma.SelectSubset<T, ProjectGroupUpdateArgs<ExtArgs>>): Prisma.Prisma__ProjectGroupClient<runtime.Types.Result.GetResult<Prisma.$ProjectGroupPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProjectGroups.
   * @param {ProjectGroupDeleteManyArgs} args - Arguments to filter ProjectGroups to delete.
   * @example
   * // Delete a few ProjectGroups
   * const { count } = await prisma.projectGroup.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProjectGroupDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProjectGroupDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProjectGroups.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectGroupUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProjectGroups
   * const projectGroup = await prisma.projectGroup.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProjectGroupUpdateManyArgs>(args: Prisma.SelectSubset<T, ProjectGroupUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProjectGroups and returns the data updated in the database.
   * @param {ProjectGroupUpdateManyAndReturnArgs} args - Arguments to update many ProjectGroups.
   * @example
   * // Update many ProjectGroups
   * const projectGroup = await prisma.projectGroup.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProjectGroups and only return the `id`
   * const projectGroupWithIdOnly = await prisma.projectGroup.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProjectGroupUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProjectGroupUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectGroupPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProjectGroup.
   * @param {ProjectGroupUpsertArgs} args - Arguments to update or create a ProjectGroup.
   * @example
   * // Update or create a ProjectGroup
   * const projectGroup = await prisma.projectGroup.upsert({
   *   create: {
   *     // ... data to create a ProjectGroup
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProjectGroup we want to update
   *   }
   * })
   */
  upsert<T extends ProjectGroupUpsertArgs>(args: Prisma.SelectSubset<T, ProjectGroupUpsertArgs<ExtArgs>>): Prisma.Prisma__ProjectGroupClient<runtime.Types.Result.GetResult<Prisma.$ProjectGroupPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProjectGroups.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectGroupCountArgs} args - Arguments to filter ProjectGroups to count.
   * @example
   * // Count the number of ProjectGroups
   * const count = await prisma.projectGroup.count({
   *   where: {
   *     // ... the filter for the ProjectGroups we want to count
   *   }
   * })
  **/
  count<T extends ProjectGroupCountArgs>(
    args?: Prisma.Subset<T, ProjectGroupCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProjectGroupCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProjectGroup.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectGroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProjectGroupAggregateArgs>(args: Prisma.Subset<T, ProjectGroupAggregateArgs>): Prisma.PrismaPromise<GetProjectGroupAggregateType<T>>

  /**
   * Group by ProjectGroup.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectGroupGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProjectGroupGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProjectGroupGroupByArgs['orderBy'] }
      : { orderBy?: ProjectGroupGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProjectGroupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProjectGroup model
 */
readonly fields: ProjectGroupFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProjectGroup.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProjectGroupClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Project<T extends Prisma.ProjectDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProjectDefaultArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  tasks<T extends Prisma.ProjectGroup$tasksArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProjectGroup$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProjectGroup model
 */
export interface ProjectGroupFieldRefs {
  readonly id: Prisma.FieldRef<"ProjectGroup", 'String'>
  readonly name: Prisma.FieldRef<"ProjectGroup", 'String'>
  readonly description: Prisma.FieldRef<"ProjectGroup", 'String'>
  readonly projectId: Prisma.FieldRef<"ProjectGroup", 'String'>
}
    

// Custom InputTypes
/**
 * ProjectGroup findUnique
 */
export type ProjectGroupFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectGroup
   */
  select?: Prisma.ProjectGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectGroup
   */
  omit?: Prisma.ProjectGroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectGroupInclude<ExtArgs> | null
  /**
   * Filter, which ProjectGroup to fetch.
   */
  where: Prisma.ProjectGroupWhereUniqueInput
}

/**
 * ProjectGroup findUniqueOrThrow
 */
export type ProjectGroupFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectGroup
   */
  select?: Prisma.ProjectGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectGroup
   */
  omit?: Prisma.ProjectGroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectGroupInclude<ExtArgs> | null
  /**
   * Filter, which ProjectGroup to fetch.
   */
  where: Prisma.ProjectGroupWhereUniqueInput
}

/**
 * ProjectGroup findFirst
 */
export type ProjectGroupFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectGroup
   */
  select?: Prisma.ProjectGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectGroup
   */
  omit?: Prisma.ProjectGroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectGroupInclude<ExtArgs> | null
  /**
   * Filter, which ProjectGroup to fetch.
   */
  where?: Prisma.ProjectGroupWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProjectGroups to fetch.
   */
  orderBy?: Prisma.ProjectGroupOrderByWithRelationInput | Prisma.ProjectGroupOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProjectGroups.
   */
  cursor?: Prisma.ProjectGroupWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProjectGroups from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProjectGroups.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProjectGroups.
   */
  distinct?: Prisma.ProjectGroupScalarFieldEnum | Prisma.ProjectGroupScalarFieldEnum[]
}

/**
 * ProjectGroup findFirstOrThrow
 */
export type ProjectGroupFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectGroup
   */
  select?: Prisma.ProjectGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectGroup
   */
  omit?: Prisma.ProjectGroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectGroupInclude<ExtArgs> | null
  /**
   * Filter, which ProjectGroup to fetch.
   */
  where?: Prisma.ProjectGroupWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProjectGroups to fetch.
   */
  orderBy?: Prisma.ProjectGroupOrderByWithRelationInput | Prisma.ProjectGroupOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProjectGroups.
   */
  cursor?: Prisma.ProjectGroupWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProjectGroups from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProjectGroups.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProjectGroups.
   */
  distinct?: Prisma.ProjectGroupScalarFieldEnum | Prisma.ProjectGroupScalarFieldEnum[]
}

/**
 * ProjectGroup findMany
 */
export type ProjectGroupFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectGroup
   */
  select?: Prisma.ProjectGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectGroup
   */
  omit?: Prisma.ProjectGroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectGroupInclude<ExtArgs> | null
  /**
   * Filter, which ProjectGroups to fetch.
   */
  where?: Prisma.ProjectGroupWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProjectGroups to fetch.
   */
  orderBy?: Prisma.ProjectGroupOrderByWithRelationInput | Prisma.ProjectGroupOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProjectGroups.
   */
  cursor?: Prisma.ProjectGroupWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProjectGroups from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProjectGroups.
   */
  skip?: number
  distinct?: Prisma.ProjectGroupScalarFieldEnum | Prisma.ProjectGroupScalarFieldEnum[]
}

/**
 * ProjectGroup create
 */
export type ProjectGroupCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectGroup
   */
  select?: Prisma.ProjectGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectGroup
   */
  omit?: Prisma.ProjectGroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectGroupInclude<ExtArgs> | null
  /**
   * The data needed to create a ProjectGroup.
   */
  data: Prisma.XOR<Prisma.ProjectGroupCreateInput, Prisma.ProjectGroupUncheckedCreateInput>
}

/**
 * ProjectGroup createMany
 */
export type ProjectGroupCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProjectGroups.
   */
  data: Prisma.ProjectGroupCreateManyInput | Prisma.ProjectGroupCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProjectGroup createManyAndReturn
 */
export type ProjectGroupCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectGroup
   */
  select?: Prisma.ProjectGroupSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectGroup
   */
  omit?: Prisma.ProjectGroupOmit<ExtArgs> | null
  /**
   * The data used to create many ProjectGroups.
   */
  data: Prisma.ProjectGroupCreateManyInput | Prisma.ProjectGroupCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectGroupIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ProjectGroup update
 */
export type ProjectGroupUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectGroup
   */
  select?: Prisma.ProjectGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectGroup
   */
  omit?: Prisma.ProjectGroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectGroupInclude<ExtArgs> | null
  /**
   * The data needed to update a ProjectGroup.
   */
  data: Prisma.XOR<Prisma.ProjectGroupUpdateInput, Prisma.ProjectGroupUncheckedUpdateInput>
  /**
   * Choose, which ProjectGroup to update.
   */
  where: Prisma.ProjectGroupWhereUniqueInput
}

/**
 * ProjectGroup updateMany
 */
export type ProjectGroupUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProjectGroups.
   */
  data: Prisma.XOR<Prisma.ProjectGroupUpdateManyMutationInput, Prisma.ProjectGroupUncheckedUpdateManyInput>
  /**
   * Filter which ProjectGroups to update
   */
  where?: Prisma.ProjectGroupWhereInput
  /**
   * Limit how many ProjectGroups to update.
   */
  limit?: number
}

/**
 * ProjectGroup updateManyAndReturn
 */
export type ProjectGroupUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectGroup
   */
  select?: Prisma.ProjectGroupSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectGroup
   */
  omit?: Prisma.ProjectGroupOmit<ExtArgs> | null
  /**
   * The data used to update ProjectGroups.
   */
  data: Prisma.XOR<Prisma.ProjectGroupUpdateManyMutationInput, Prisma.ProjectGroupUncheckedUpdateManyInput>
  /**
   * Filter which ProjectGroups to update
   */
  where?: Prisma.ProjectGroupWhereInput
  /**
   * Limit how many ProjectGroups to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectGroupIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ProjectGroup upsert
 */
export type ProjectGroupUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectGroup
   */
  select?: Prisma.ProjectGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectGroup
   */
  omit?: Prisma.ProjectGroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectGroupInclude<ExtArgs> | null
  /**
   * The filter to search for the ProjectGroup to update in case it exists.
   */
  where: Prisma.ProjectGroupWhereUniqueInput
  /**
   * In case the ProjectGroup found by the `where` argument doesn't exist, create a new ProjectGroup with this data.
   */
  create: Prisma.XOR<Prisma.ProjectGroupCreateInput, Prisma.ProjectGroupUncheckedCreateInput>
  /**
   * In case the ProjectGroup was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProjectGroupUpdateInput, Prisma.ProjectGroupUncheckedUpdateInput>
}

/**
 * ProjectGroup delete
 */
export type ProjectGroupDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectGroup
   */
  select?: Prisma.ProjectGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectGroup
   */
  omit?: Prisma.ProjectGroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectGroupInclude<ExtArgs> | null
  /**
   * Filter which ProjectGroup to delete.
   */
  where: Prisma.ProjectGroupWhereUniqueInput
}

/**
 * ProjectGroup deleteMany
 */
export type ProjectGroupDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProjectGroups to delete
   */
  where?: Prisma.ProjectGroupWhereInput
  /**
   * Limit how many ProjectGroups to delete.
   */
  limit?: number
}

/**
 * ProjectGroup.tasks
 */
export type ProjectGroup$tasksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  where?: Prisma.TaskWhereInput
  orderBy?: Prisma.TaskOrderByWithRelationInput | Prisma.TaskOrderByWithRelationInput[]
  cursor?: Prisma.TaskWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TaskScalarFieldEnum | Prisma.TaskScalarFieldEnum[]
}

/**
 * ProjectGroup without action
 */
export type ProjectGroupDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectGroup
   */
  select?: Prisma.ProjectGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectGroup
   */
  omit?: Prisma.ProjectGroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectGroupInclude<ExtArgs> | null
}
